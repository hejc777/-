using System;
using System.Data;
using System.Drawing;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Sql;
using System.Data.SqlClient;
using System.Data.OleDb;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Windows.Forms.DataVisualization.Charting;

namespace WindowsFormsApp1
{

    public partial class Form1 : Form
    {

        class ItemInfo
        {
            /// <summary>
            /// ItemInfo 类记录数组元素重复次数
            /// </summary>
            /// <param name="value">数组元素值</param>
            public ItemInfo(int value)
            {
                Value = value;
                RepeatNum = 1;
            }
            /// <summary>
            /// 数组元素的值
            /// </summary>
            public int Value { get; set; }
            /// <summary>
            /// 数组元素重复的次数
            /// </summary>
            public int RepeatNum { get; set; }
        }
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Paint(object sender, PaintEventArgs e)
        {
            Button btn = sender as Button;
            System.Drawing.Drawing2D.GraphicsPath btnPath = new System.Drawing.Drawing2D.GraphicsPath();
            System.Drawing.Rectangle newRectangle = btn.ClientRectangle;
            newRectangle.Inflate(-2, -1);
            e.Graphics.DrawEllipse(System.Drawing.Pens.BlanchedAlmond, newRectangle);
            newRectangle.Inflate(-2, -4);
            btnPath.AddEllipse(newRectangle);
            btn.Region = new System.Drawing.Region(btnPath);
        }
        //创建数据表
        DataTable dt = new DataTable();
        DataTable dt1 = new DataTable();
        DataTable dt2 = new DataTable();
        DataTable dt3 = new DataTable();
        DataTable dt4 = new DataTable();

        int[] 热码数量 = { 1, 2, 3 };
        int[] 温码数量 = { 0, 1 };
        int[] 冷码数量 = { 3, 4, 5 };
        int iiReadRec = 0; //读取记录数
        int sumRec = 0;    //合值
        double iiCount = 0; //所有生成数据量
        int js = 0;//奇数
        int os = 0;//偶数
        int numCount = 6; //生成号码总数
        int numMAX = 33;   //生成号码最大值，快乐8是80+1，双色球是33+1
        Boolean fxstop = false; //中止分析
        decimal[][] bfltable =
        {
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0},
            new decimal[2]{0,0}

        };


        int[,] bgz = new int[8, 4]{
            { 1, 10, 19, 28 },
            { 2, 11, 20, 29 },
            { 3, 12, 21, 30 },
            { 4, 13, 22, 31 },
            { 5, 14, 23, 32 },
            { 6, 15, 22, 25 },
            { 7, 16, 17, 26 },
            { 8, 9, 18, 27 }
        };

        //集团号码，若随机的号码里面组合有5个与该下列号码相同，就排除。
        int[] jthm = { 1, 2, 3, 4, 6, 9, 14, 16, 18, 24, 25, 28, 32 };

        //排除万能12码
        //如果你选择的号码里面没有以下号码其中之一，就排除。
        int[] wlm = { 1, 10, 11, 12, 14, 15, 18, 19, 24, 25, 27, 29 };

        //排除神奇数字7
        //如果你选择的号码里没有以下号码或大于等于5个，则排除。
        int[] s7sz = { 7, 14, 16, 17, 18, 21, 25, 27, 28, 29 };

        //排除质数为0的号码
        //如果你选择的号码里没有质数时，则排除。
        int[] zshm = { 1, 3, 5, 7, 11, 13, 15, 17, 19, 23, 29, 31 };

        //排除没有2，3，6，7，9尾号
        //经研究，开出的号码多数要包含带有尾数为2，3，6，7，9的数字，没有则排除
        int[] w23679w = { 2, 13, 16, 27, 29 };

        int[] zbh = { };

        //分组排除法-----
        int qxcount = 4; //出现几个排除设定
        int[,] hm1 = new int[,]
        {
            {1,7,13,19,25,31 }, //同一注中最多出现3码99%（1%的可能出现4码）
            {2,8,14,20,26,32 }, //同一注中最多出现3码97%（3%的可能出现4码）
            {3,9,15,21,27,33 }  //同一注中最多出现3码97%（3%的可能出现4码）
        };
        int[] hm2 = { 2, 8, 14, 20, 26, 31, 32, 33 }; //同一注中最多出现3码92%（8%的可能出现4码）
        int[,] hm3 = new int[,]
        {
            {5,11,17,23,29 }, //同一注中最多出现3码（85%的可能出现2码）
            {4,10,16,22,28 }, //同一注中最多出现3码（85%的可能出现2码）
            {6,12,18,24,30 }  //同一注中最多出现3码（85%的可能出现2码）
        };
        int[,] hm4 = new int[,]
        {
            {4,7,8,9,10,11,12,16,22,28 },//同一注中最多出现4码97%（3%的可能出现5码）
            {5,7,8,9,10,11,12,17,23,29 },//同一注中最多出现4码96%（4%的可能出现5码）
            {6,7,8,9,10,11,12,18,24,30 },//同一注中最多出现4码99%（1%的可能出现5码）
            {1,2,3,4,5,6,11,17,23,29 },//同一注中最多出现4码98%（2%的可能出现5码）
            {1,2,3,4,5,6,12,18,24,30 }//同一注中最多出现4码97%（2%的可能出现5码,%1出现6码）
        };
        int[,] hm5 = new int[,]
        {
            {1,4,7,10,13,16,19,22,25,28,33 },//同一注中最多出现4码95%（5%的可能出现5码）
            {1,6,7,12,13,18,19,24,25,30,33 },//同一注中最多出现4码96%（4%的可能出现5码，1%出现6码）
            {2,5,8,11,14,17,20,23,26,29,32 }//同一注中最多出现4码98%（2%的可能出现5码）
        };
        int[] hm6 = { 2, 3, 8, 9, 14, 15, 20, 21, 26, 27, 32, 33 }; //同一注中最多出现4码93%（7%的可能出现5码）
        int hm7count = 5;
        int[,] hm7 = new int[,]
        {
            {3,4,9,10,15,16,21,22,27,28,33 },//同一注中最多出现4码98%（2%的可能出现5码）
            {3,6,9,12,15,16,21,24,27,30,33 }//同一注中最多出现4码99%（1%的可能出现5码）
        };
        int[] hm8 = { 4, 5, 10, 11, 16, 17, 22, 23, 28, 29 };//同一注中最多出现4码99%（1%的可能出现5码）
        int[,] hm9 = new int[,]
        {
            {1,7,8,9,10,11,12,13,19,25,31 },//同一注中最多出现4码96%（4%的可能出现5码）
            {3,7,8,9,10,11,12,15,21,27,33 }//同一注中最多出现4码95%（5%的可能出现5码）
        };
        //如果你发现你的号码组里有5个以上在以上号码组里，那么你本期的投注号码将与六红基本告别；
        //分组排除法结束-----

        //15 groupNumber
        int[,] hm11 = new int[3, 11];
        //{
        //    //{2,3,11,16,18,19,21,22,26,27,29,31 },
        //    //{3,5,7,11,13,14,21,23,24,27,32,33 },
        //    //{1,2,3,6,7,11,15,18,24,25,29,32 },
        //    //{2,6,8,10,13,15,19,23,27,29,31,32 },
        //    //{5,8,12,14,15,17,18,25,26,30,31,33 }

        //    //{3,4,6,10,13,15,24,27,30,33 },
        //    //{7,10,12,14,16,20,27,28,30,31 }
        //    //{2,3,4,8,14,15,17,18,28,32 },
        //    //{6,9,12,14,18,19,25,29,30,33 },
        //    //{1,6,10,13,15,21,22,24,25,31 },
        //    //{4,5,7,11,12,16,19,22,23,25 }

        //    //{1,4,7,10,13,16,19,22,25,28,31 },
        //    //{2,5,8,11,14,17,20,23,26,29,32 },
        //    //{3,6,9,12,15,18,21,24,27,30,33 }

        //    //{2,8,10,19,23,27,29,31 },
        //    //{1,2,3,7,11,18,25,32},
        //    //{3,5,9,13,22,26,30,33 },
        //    //{4,7,10,14,17,18,23,25 },
        //    //{5,6,11,16,19,22,28,31 },
        //    //{7,9,11,13,19,25,27,33 },
        //    //{7,10,14,15,18,20,25,31 }
        //};

        int[][] hmxsd;

        List<int> 温码 = new List<int>();
        List<int> 热码 = new List<int>();
        List<int> 冷码 = new List<int>();
        List<int> 漏码 = new List<int>();

        int[,] hm10 = new int[,]
        {
            {5,10,16,19,29,32,4 },
            {13,14,20,22,26,32,2 },
            {3,9,16,17,18,22,16 },
            {2,6,15,16,21,23,11 },
            {5,11,13,16,21,30,10},
            {2,4,11,22,27,32,10 },
            {1,3,16,22,23,30,3 },
            {2,5,11,22,30,33,10 },
            {4,6,13,21,22,25,6 },
            {1,2,7,15,24,29,12 },
            {4,7,8,17,22,26,15 },
            {15,16,20,22,23,29,14 },
            {2,7,11,21,27,28,2 },
            {4,9,10,19,26,27,12 },
            {3,11,15,21,25,26,3 },
            {5,11,17,18,30,31,13 },
            {2,4,13,16,18,20,16 },
            {1,11,15,27,32,33,1 },
            {1,4,25,27,28,33,3 },
            {4,5,11,15,20,32,13 }, //最后一位 - 第一位 = 下期第五位
            {1,8,12,17,19,24,16 }, //最后一位 + 第二位 = 下期第六位
            {9,10,13,19,24,32,1 }, //最后一位 - 第五位 = 下期第二位
            {1,8,13,18,20,26,16 }, //最后一位 - 第三位 = 下期第三位
            {2,5,13,20,27,32,10 }, //最后三位 - 第一位 = 下期第四位
            {14,18,23,24,26,33,10 },
            {1,4,13,18,26,30,3 },
            {2,14,15,17,25,30,11 },
            {2,15,22,26,30,33,4 },
            {5,7,9,16,17,29,15 },
            {1,7,10,13,27,33,15 },
            {1,5,7,11,18,19,7 },  //中奖一期时没有要这组含之前的数据
            {2,9,26,27,31,32,14 },
            {2,3,4,6,11,15,14 },
            {3,12,14,16,29,32,12},
            {1,15,20,22,31,32,3},
            {3,10,11,19,27,28,7},
            {7,11,18,24,27,32,4},
            {4,5,23,24,26,31,11},
            {8,11,16,25,29,32,3 },
            {1,4,11,12,22,30,16},
            {4,13,17,23,25,33,14},
            {3,4,24,28,29,33,9},
            {1,8,9,23,24,30,8},
            {1,6,8,13,17,19,9},
            {3,8,11,22,31,33,4},
            {2,5,17,19,29,33,4},
            {5,16,23,24,26,29,4},
            {12,21,23,27,32,33,15},
            {9,15,18,21,22,25,1},
            {8,12,15,17,19,30,8},
            {13,14,19,24,27,30,5},
            {4,12,17,24,26,27,16},
            {3,8,10,20,30,31,2},
            {4,10,12,13,18,30,3},
            {2,4,14,18,23,27,13},
            {4,6,9,14,16,21,3},
            {6,13,17,22,25,27,9},
            {1,5,7,11,12,15,12},
            {3,8,11,12,18,19,5},
            {13,15,16,19,20,24,10},
            {7,11,17,24,31,32,12},
            {3,6,9,15,18,31,1},
            {3,8,10,17,30,32,10},
            {3,9,18,19,20,26,11},
            {17,19,20,23,25,31,2},
            {1,5,15,21,23,27,15},
            {1,8,10,13,19,29,13},
            {3,9,14,29,32,33,15},
            {1,2,13,16,17,29,16},
            {1,6,12,17,23,25,4},
            {6,11,12,27,29,30,13 },
            {2,3,6,7,16,26,4},
            {5,9,14,21,22,26,12},
            {1,4,6,14,17,22,8},
            {3,5,8,18,22,28,1},
            {3,22,24,27,29,32,15},
            {7,8,10,22,24,32,7},
            {3,9,12,18,28,30,1},
            {1,14,20,21,23,27,6},
            {2,8,19,28,30,31,14},
            {4,13,18,20,22,28,5},
            {6,13,20,21,24,32,6},
            {1,2,7,19,20,21,1},
            {1,11,13,17,25,29,3},
            {8,9,12,22,26,32,13},
            {3,5,9,10,19,22,14},
            {6,8,17,18,28,30,5},
            {7,14,16,23,28,32,4},
            {1,7,10,16,18,27,16},
            {1,9,18,22,25,28,2},
            {1,2,6,10,22,28,15},
            {1,3,14,25,31,33,7},
            {8,12,13,17,27,29,13},
            {3,8,17,18,23,31,8},
            {5,18,20,24,25,26,6},
            {2,4,6,7,16,29,3},
            {8,13,20,25,31,32,3},
            {7,14,21,22,28,33,7},
            {7,10,11,15,17,21,3},
            {5,9,13,20,23,28,6},
            {1,3,7,10,22,33,2},
            {12,15,17,23,26,32,11},
            {2,9,15,19,26,28,2},
            {7,8,21,26,29,30,15},
            {2,6,10,11,17,29,15},
            {2,8,19,23,24,26,3},
            {2,6,17,25,32,33,6},
            {4,6,7,14,15,24,8},
            {2,4,5,14,26,32,14},
            {2,9,12,22,25,33,16},
            {11,14,18,19,23,26,2},
            {2,6,12,29,30,31,10},
           //{2,6,12,29,28,33,7},
            {8,10,18,23,27,31,2},
            {1,4,5,6,12,14,13},
            {5,7,14,17,21,31,6},
            {2,9,12,19,21,31,4},
            {6,10,11,18,20,32,5},
            {1,3,4,11,12,21,16},
            {9,10,13,25,30,32,2},
            {1,8,22,25,29,33,10},
            {12,18,23,25,28,33,4},
            {3,7,8,11,18,19,5},
            {2,6,13,27,28,32,13},
            {4,7,18,19,20,25,6},
            {8,15,21,22,25,33,13},
            {3,7,21,24,26,30,10},
            {1,10,22,25,28,32,10},
            {2,9,11,14,18,26,6},
            {4,6,16,17,23,24,11},
            {3,8,12,14,17,33,8},
            {5,11,12,16,17,20,8},
            {6,15,17,24,28,29,16},
            {4,17,19,20,25,32,4},
            {7,12,20,24,32,33,4},
            {3,8,17,18,20,30,15},
            {1,2,10,22,24,25,13},
            {1,7,10,14,21,25,7},
            {1,3,7,18,22,28,15},
            {8,12,16,20,27,31,6},
            {11,16,20,21,23,24,4},
            {1,4,7,10,17,23,14},
            {8,20,21,23,27,30,13},
            {4,5,6,7,20,22,15},
            {7,18,20,21,26,32,5},
            {5,6,20,23,25,32,3},
            {9,13,17,18,21,27,4},
            {1,5,8,13,32,33,3},
            {4,9,10,17,19,20,9},
            {3,7,16,26,27,32,16},
            {1,15,16,20,25,27,5 }, //2023
            {10,17,25,26,30,33,5 },
            {2,10,19,24,26,33,15 },
            {3,5,7,9,19,20,8 },
            {5,6,14,16,19,32,12 },
            {2,3,6,11,20,32,9 },
            {7,10,21,22,23,24,11 },
            {12,16,17,22,25,27,8 },
            {5,7,9,16,23,30,15 },
            {2,8,20,21,27,33,14 },
            {1,8,11,12,21,23,3 },
            {3,4,11,14,30,31,5 },
            {12,14,19,21,27,31,11 },
            {3,22,28,30,31,33,4 },
            {3,12,17,19,23,27,11 },
            { 3,5,10,21,22,26,10 },
            {5,6,11,13,28,30,7 },
            {5,8,9,17,22,33,4 },
            {4,5,10,14,22,25,3 },
            {3,9,11,15,25,27,1 },
            {6,7,14,20,26,32,1 }, //2023-11-14
            {4,10,17,22,23,32,16 },
            {8,9,12,17,32,33,4 },
            {7,16,20,21,27,33,1 },
            {3,8,19,22,26,32,14 },
            {10,24,26,28,29,31,16 },
            {11,14,15,27,30,33,4 },
            {2,3,17,18,25,30,11 },
            {10,13,15,22,29,32,15 },
            {7,8,14,18,20,30,5 },
            {2,12,16,25,30,31,12 },
            {3,8,13,24,27,29,8 },
            {1,2,3,19,21,28,15 },
            {1,2,11,19,25,29,4 },
            {2,11,14,17,18,28,8 },
            {2,8,9,13,24,27,12 },
            {2,7,16,21,26,27,16 },
            {7,9,15,16,17,26,9 },
            {1,2,13,18,25,27,3 },
            {9,12,13,22,24,31,4 },
            {5,6,12,17,20,33,9 },
            {2,6,20,25,29,33,16 },
            {6,8,10,13,16,28,13 },
            {1,3,6,8,18,24,9 },
            {3,7,18,25,29,33,14 },
            {7,9,10,20,22,24,7 },
            {1,3,5,26,30,32,16 },
            {10,19,23,25,30,31,12 },
            {5,6,13,24,25,29,15 },
            {1,9,10,13,21,28,10 }, //2023-9-3
            {1,5,9,15,18,26,4 },
            {5,6,12,15,23,25,4 },
            {9,11,14,19,27,33,5 },
            {2,10,11,14,21,27,11 },
            {1,9,14,19,29,30,15 },
            {8,11,18,26,31,32,15 },
            {3,8,16,17,22,26,11 },
            {6,10,12,14,30,31,12 },
            {10,21,24,25,27,32,7 },
            {3,12,24,25,32,33,13 },
            {16,20,22,26,30,32,16 },
            {1,2,9,26,30,31,7 },
            {8,13,15,27,28,31,11 },
            {1,14,18,26,31,33,5 },
            {2,9,15,17,28,33,1 },
            {8,9,10,22,26,32,12 },
            {11,18,23,24,31,33,13 },
            {9,13,14,17,19,27,3 },
            {7,10,12,16,17,30,12 },
            {4,18,19,24,27,30,16 },
            {1,11,15,16,22,31,15 },
            {1,2,4,9,25,31,8 },
            {5,6,9,12,21,22,7 },
            {6,8,14,19,30,31,8 },
            {7,9,14,22,26,27,1 },
            {3,4,15,18,19,22,9 },
            {13,15,24,28,30,31,1 },
            {2,8,9,18,19,21,3 },
            {1,3,15,16,25,32,10 },
            {2,6,10,24,25,33,9 },
            {5,12,15,19,24,26,6 },
            {3,5,25,31,32,33,4 },
            {12,14,17,20,21,26,2 },
            {11,12,15,18,29,33,2 },
            {1,3,12,19,28,32,14 },
            {2,7,8,10,26,31,6 },
            {2,14,17,20,26,33,14 },
            {1,7,11,12,16,18,4 },
            {4,8,17,20,22,27,13 },
            {11,19,23,24,26,33,15 },
            {1,4,6,11,12,22,15 },
            {9,11,17,19,30,31,11 },
            {2,6,13,22,27,32,6 },
            {10,17,22,26,30,33,11 },
            {2,5,10,17,24,32,3 },
            {8,14,15,18,23,33,8 },
            {3,4,20,23,27,32,13 },
            {5,6,9,10,15,26,12 },
            {1,7,14,20,27,30,15 },
            {3,4,5,8,12,17,6 },
            {22,26,29,30,32,33,14 },
            {2,7,9,14,22,23,5 },
            {5,7,14,23,25,27,2 },
            {2,3,10,24,28,30,8 },
            {5,7,14,23,31,33,7 },
            {6,8,17,25,26,28,3 },
            {3,6,12,21,27,28,4 },
            {2,8,15,22,24,26,16 },
            {5,8,12,20,24,28,10 },
            {10,17,20,23,27,30,10 },
            {1,6,12,13,15,24,6 },
            {9,16,17,24,29,31,8 },
            {2,3,9,13,19,28,9 },
            {2,9,14,17,31,33,8 },
            {8,23,25,26,29,31,12 },
            {13,14,18,19,24,30,9 },
            {1,4,9,10,20,33,6 },
            {2,3,9,11,12,17,15 },
            {8,9,13,23,24,26,5 },
            {6,19,20,26,28,33,1 },
            {7,14,27,29,31,33,5 },
            {2,3,7,16,30,31,6 },
            {3,7,12,24,28,33,8 },
            {5,7,10,17,20,22,14 },
            {8,10,22,27,32,33,8 },
            {1,18,26,30,31,33,3 },
            {4,16,20,21,31,32,14 },
            {3,6,9,17,27,28,3 },
            {5,8,10,15,24,25,9 },
            {10,11,18,19,23,31,3 },
            {2,5,6,19,21,27,4 },
            {1,12,17,18,26,27,5 },
            {6,12,26,28,29,32,15 },
            {10,12,17,19,25,31,13 },
            {5,11,18,20,26,28,12 },
            {14,16,19,23,28,30,3 },
            {2,3,14,21,29,32,8 },
            {6,7,18,23,27,30,5 },
            {6,10,14,22,23,33,13 },
            {3,4,7,22,26,30,6 },
            {6,7,16,17,21,22,4 },
            {4,5,13,18,27,29,12 },
            {3,4,19,23,30,32,6 },
            {5,13,18,20,26,28,6 },
            {5,6,9,22,25,31,3 },
            {2,10,12,14,24,26,5 },
            {2,6,8,13,14,19,16 },
            {1,7,15,16,20,25,16 },
            {5,8,18,25,30,32,6 },
            {2,6,10,16,18,22,13 },
            {9,16,18,22,28,32,2 }, //2023-1-1
            {1,7,11,12,22,28,5 },
            {2,22,26,29,32,33,14 },
            {2,15,16,17,21,31,14 },
            {2,3,7,13,20,30,10 },
            {6,7,13,18,26,31,6 },
            {3,21,25,30,31,33,11 },
            {7,20,22,23,31,32,5 },
            {7,8,13,29,30,33,3 },
            {1,3,13,16,21,27,3 },
            {5,12,13,17,20,27,14 },
            {8,9,18,19,20,27,15 },
            {6,7,9,16,17,19,14 },
            {2,14,19,21,25,28,11 },
            {8,21,23,27,28,33,1 },
            {8,10,14,15,18,22,8 },
            {9,11,13,24,28,32,6 },
            {1,5,14,17,24,31,14 },
            {5,8,16,17,21,25,12 },
            {1,3,18,26,32,33,4 },
            {3,5,10,13,19,29,6 },
            {2,8,15,17,26,28,12 },
            {10,12,14,22,24,27,7 },
            {3,12,18,24,27,29,1 },
            {3,4,9,10,29,33,13 },
            {1,13,15,17,26,33,13 },
            {2,3,7,12,20,31,16 },
            {5,10,13,18,24,26,1 },
            {10,13,16,20,21,25,5 },
            {6,8,17,19,24,28,5 },
            {12,17,22,27,30,31,2 },
            {2,15,19,26,27,29,2 },
            {2,5,15,18,26,27,4 },
            {2,6,7,11,14,33,8 },
            {4,13,17,18,28,29,6 },
            {8,14,26,27,30,33,1 },
            {6,7,18,20,27,29,9 },
            {1,5,15,19,26,29,13 },
            {13,14,20,24,27,29,2 },
            {3,5,8,17,25,31,1 },
            {2,10,11,13,28,31,1 },
            {9,13,15,18,20,28,15 },
            {4,11,13,19,22,33,11 },
            {1,7,13,17,18,31,15 },
            {3,9,11,15,19,28,16 },
            {17,20,22,23,24,31,1 },
            {6,12,13,15,21,23,15 },
            {1,8,19,25,26,31,1 },
            {6,9,12,14,20,28,10 },
            {9,10,12,18,29,32,14 },
            {4,16,18,19,27,28,4 },
            {2,6,7,15,20,21,15 },
            {1,11,23,24,26,32,15 },
            {2,3,4,6,21,33,5 },
            {4,5,10,13,30,31,14 },
            {3,16,17,19,25,33,7 },
            {4,13,14,18,20,28,8 },
            {6,11,12,27,29,30,13 },
            {6,11,13,16,19,31,2 },
            {21,22,24,28,29,32,14 },
            {7,10,16,20,21,27,11 },
            {8,18,20,22,24,28,10 },
            {1,4,25,27,29,30,7 },
            {2,7,15,29,31,33,15 },
            {3,9,15,17,20,22,6 },
            {5,6,9,13,23,25,8 },
            {1,4,8,21,23,24,11 },
            {7,9,14,31,32,33,13 },
            {3,18,23,24,25,32,9 },
            {8,12,13,14,19,20,5 },
            {4,10,11,23,30,32,14 },
            {4,8,11,21,27,30,1 },
            {5,12,15,17,18,27,4 },
            {1,9,15,17,22,23,16 },
            {1,4,5,15,17,31,9 },
            {3,17,18,19,20,27,16 },
            {8,9,10,13,24,29,2 },
            {1,2,4,25,26,30,10 },
            {5,7,15,19,29,33,15 },
            {6,10,14,15,26,29,12 },
            {5,14,15,16,18,32,12 },
            {4,7,15,18,29,33,1 },
            {4,6,9,27,28,33,2 },
            {6,7,13,19,26,29,8 },
            {7,12,15,24,26,29,6 },
            {1,5,13,21,26,29,15 },
            {6,11,14,20,27,30,9 },
            {9,14,18,23,28,31,2 },
            {4,6,12,13,17,31,16 },
            {6,8,9,17,22,31,11 },
            {16,18,20,21,23,33,5 },
            {1,3,16,18,29,33,6 },
            {16,18,19,24,28,32,1 },
            {6,9,18,19,29,33,6 },
            {6,13,14,23,31,33,1 },
            {12,15,20,26,30,33,16 },
            {1,6,11,14,17,26,15 },
            {2,4,9,26,28,33,3 },
            {8,12,21,27,28,33,11 },
            {10,14,18,23,27,33,15 },
            {7,24,27,29,31,32,15 },
            {2,5,11,17,21,33,1 },
            {3,5,8,14,27,33,8 },
            {2,4,7,18,25,26,10 },
            {5,7,17,20,26,31,14 },
            {3,7,8,14,27,30,9 },
            {2,11,24,25,27,30,14 },
            {3,12,17,18,19,28,4 },
            {1,7,8,21,23,29,6 },
            {2,17,20,23,25,27,8 },
            {5,10,11,21,22,30,13 },
            {5,7,21,22,24,29,14 },
            {3,12,14,16,31,33,12 },
            {2,6,7,10,15,20,5 },
            {9,12,13,16,24,32,4 },
            {1,10,13,20,22,32,14 },
            {2,3,14,16,26,31,2 },
            {8,12,13,19,23,25,15 },
            {14,17,26,31,32,33,10 },
            {5,12,19,22,25,26,5 },
            {4,10,11,14,23,32,7 },
            {1,10,11,22,26,32,7 },
            {12,23,24,26,27,30,5 },
            {3,8,10,13,26,32,8 },
            {5,11,20,22,23,29,9 },
            {14,15,18,19,26,32,9 },
            {3,4,10,15,22,24,2 },
            {6,19,24,25,28,32,4 },
            {7,9,10,14,19,24,15 },
            {7,12,17,19,24,25,2 },
            {1,7,11,15,17,19,6 },
            {3,7,22,24,26,31,14 },
            {9,11,14,22,30,32,1 },
            {5,6,14,20,21,25,8 },
            {7,11,16,17,30,32,16 },
            {6,9,24,29,30,32,7 },
            {5,10,19,20,29,31,14 },
            {6,14,16,27,28,31,7 },
            {6,7,13,14,15,27,4 },
            {2,3,4,7,10,18,15 },
            {4,7,8,29,30,31,1 },
            {6,15,23,24,25,33,15 },
            {12,18,19,20,21,32,15 },
            {4,15,17,19,25,28,16 },
            {2,3,7,9,20,21,13 },
            {1,20,22,23,25,28,16 },
            {3,6,9,15,22,31,2 },
            {7,10,12,16,19,31,16 },
            {5,9,24,28,30,32,14 },
            {2,5,16,17,18,30,6 },
            {2,12,21,23,25,31,8 },
            {6,13,15,17,20,21,3 }, //2022-1-2
            {9,14,20,21,24,26,4 },{5,10,15,18,19,32,5},{10,12,15,17,19,20,8},{5,10,11,13,27,28,9},{7,9,21,22,26,32,3},
            {4,7,10,14,16,26,9 },{2,5,13,15,23,26,7},{1,9,11,13,20,29,9},{4,7,17,19,20,24,16 },{1,14,19,23,26,30,10},
            {5,10,16,26,27,33,1 },{12,14,19,23,24,27,1},{11,14,15,16,27,32,9},{3,7,10,14,21,24,1},{2,6,9,15,19,28,16},
            {3,10,17,19,21,31,4 },{1,2,16,19,25,31,8},{1,3,12,19,27,31,10},{1,4,6,14,20,28,8},{8,11,18,19,20,24,1},
            {8,9,15,24,26,30,6 },{4,15,21,27,28,29,10},{5,17,20,21,23,33,4},{7,15,16,20,27,29,7},{19,20,23,27,28,31,1},
            {14,19,20,23,24,31,9 },{1,3,18,22,29,32,2},{6,14,15,19,29,31,5},{4,5,12,15,18,28,7},{1,7,8,12,13,18,5},
            {3,9,10,11,28,29,13 },{2,6,14,18,20,31,13},{3,5,17,21,27,33,4},{6,14,17,18,31,33,6},{2,10,12,15,24,27,8},
            {4,6,8,14,24,27,2 },{4,7,10,22,27,30,2},{5,6,21,25,28,33,7},{17,20,22,23,26,28,6},{10,13,15,24,31,32,2},
            {2,3,10,17,20,26,16 },{11,15,18,24,26,32,9},{2,3,17,19,25,30,1},{1,4,7,14,30,31,3},{10,14,15,22,27,32,9},
            {1,7,17,20,22,28,15 },{10,13,15,25,29,30,15},{5,9,15,24,27,30,9},{2,4,12,22,29,31,1},{7,9,12,13,14,29,16},
            {9,11,17,18,20,27,15 },{1,10,13,18,26,32,5},{3,11,12,13,25,28,12},{1,7,11,14,15,26,11},{8,12,17,24,27,28,13},
            {9,11,24,25,28,33,15 },{5,11,15,23,28,33,3},{2,7,8,10,12,31,3},{4,6,16,24,26,33,16},{5,6,12,14,27,28,8},
            {1,2,7,13,23,24,12 },{4,12,15,16,19,26,6},{2,13,16,19,23,24,4},{6,8,10,14,28,29,1},{5,6,7,11,14,20,2},
            {5,7,9,11,21,28,1 },{4,9,11,25,28,33,4},{3,6,11,13,26,32,5},{1,3,5,18,22,23,1},{5,8,22,23,24,29,9},
            {1,3,10,24,28,29,13 },{4,6,15,26,27,31,12},{8,15,17,25,27,30,10},{3,9,21,23,30,32,6},{12,15,16,21,22,29,1},
            {4,5,9,14,25,27,7 },{1,6,18,22,24,25,8},{1,9,15,16,19,21,15},{1,7,24,31,32,33,8},{1,5,11,15,16,29,15},
            {6,11,18,20,23,26,5 },{4,14,18,24,31,32,15},{1,11,19,23,25,29,9},{2,6,19,26,30,33,15},{1,4,8,19,29,33,16},
            {4,6,8,15,16,18,16 },{4,5,6,9,23,24,9},{12,13,15,20,22,25,10},{4,9,12,18,20,23,1},{10,11,17,20,29,30,15},
            {1,9,11,18,32,33,14 },{9,11,13,18,19,28,14},{5,6,9,17,25,33,16},{8,21,22,23,29,32,1},{3,11,12,16,22,28,10},
            {7,13,21,22,24,31,2 },{7,10,14,16,24,33,16},{3,4,6,19,21,30,14},{8,9,10,19,27,29,15},{2,9,10,16,25,28,8},
            {4,11,13,22,25,32,1 },{4,15,17,22,29,32,3},{3,7,13,21,28,33,6},{1,4,14,15,17,32,2},{5,7,14,17,26,28,13},
            {2,3,17,18,23,24,1 },{5,9,10,22,25,27,8},{2,9,18,23,26,32,14},{2,6,7,24,28,29,16},{2,8,21,24,29,31,13},
            {5,7,9,16,18,27,6 },{13,17,19,24,26,30,12},{1,2,6,11,21,26,11},{4,10,12,18,23,25,1},{2,12,13,14,31,33,6},
            {1,5,8,15,16,30,3 },{6,11,21,25,28,31,7},{8,9,13,27,29,31,5},{8,10,15,17,22,30,12},{11,16,23,26,27,33,5},
            {5,7,9,16,20,26,8 },{3,5,13,19,20,25,3},{6,8,14,17,18,30,11},{1,4,6,10,11,18,2},{2,21,22,23,27,28,11},
            {10,15,17,25,31,32,6 },{4,8,17,24,28,33,13},{1,3,6,7,9,11,2},{12,16,17,24,28,29,8},{2,8,14,23,25,32,6},
            {9,15,18,29,32,33,2 },{3,8,9,13,15,18,10},{6,14,16,26,28,29,7},{4,15,21,25,29,33,6},{6,9,12,16,27,31,6},
            {3,6,14,18,20,26,1 },{5,10,16,23,27,33,14},{1,4,11,19,32,33,5},{2,4,7,24,25,32,13},{1,5,7,14,18,33,7},
            {2,4,12,21,25,32,16 },{6,8,22,24,25,26,1},{7,9,14,26,30,31,4},{2,3,7,8,17,22,15},{6,9,16,18,22,29,11},
            {6,10,13,25,26,32,11 },{2,3,13,18,20,31,11},//2021-1-3
            {2,9,10,20,22,26,1},{3,19,22,23,27,29,7},{1,4,11,12,14,23,4},{8,19,22,26,27,30,7},{8,9,11,14,17,29,16},
            {1,2,5,15,28,33,4 },{8,10,15,16,23,26,10},{1,4,18,19,26,31,7},{3,7,12,14,23,28,11},{5,12,16,26,30,31,13},
            {16,18,19,20,29,33,12 },{1,3,18,19,26,29,3},{12,15,17,24,26,31,15},{2,4,6,21,25,29,3},{1,2,3,4,9,10,12},
            {1,9,22,28,32,33,15 },{11,13,19,26,30,33,5},{7,8,9,10,16,27,7},{5,6,14,16,19,27,10},{1,4,12,20,25,32,2},
            {1,5,11,24,30,32,3 },{1,3,7,10,22,32,11},{2,9,12,17,28,32,5},{6,9,17,22,24,26,16},{2,6,9,14,22,25,4},
            {6,13,16,20,23,32,13 },{10,12,15,17,23,32,5},{3,9,11,24,25,28,16},{2,4,11,15,18,28,10},{6,14,19,20,22,24,1},
            {4,8,10,16,27,29,9 },{4,9,10,22,28,32,8},{10,17,24,25,28,30,15},{1,7,15,16,20,23,7},{5,6,11,12,15,30,12},
            {6,8,11,22,25,33,2 },{2,8,21,25,26,30,10},{1,20,23,26,27,32,15},{3,9,16,17,20,26,2},{10,15,17,27,29,31,8},
            {4,5,10,13,15,19,15 },{1,6,12,18,22,24,3}


        };

        DateTime dtStart, dtEndtime;



        public static OleDbConnection Conn = null;//连接数据库对象
        public OleDbConnection ConnValue
        {
            get { return Conn; }
            set { Conn = value; }
        }
        string conString = @"Data Source=.;Initial Catalog=cp;Persist Security Info=True;User ID=sa;Password=hejc190";
        SqlConnection sqlconn;
        SqlCommand sqlcommand;
        SqlDataAdapter sqldata;

        private void Form1_Load(object sender, EventArgs e)
        {


            Control.CheckForIllegalCrossThreadCalls = false;
            //tableLayoutPanel.GetType().GetProperty("DoubleBuffered", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).SetValue(tableLayoutPanel1, true, null);
            //创建数据列号码①②③④⑤⑥⑦
            dt.Columns.Add("num1", typeof(string));
            dt.Columns.Add("num2", typeof(string));
            dt.Columns.Add("num3", typeof(string));
            dt.Columns.Add("num4", typeof(string));
            dt.Columns.Add("num5", typeof(string));
            dt.Columns.Add("num6", typeof(string));
            dt.Columns.Add("num7", typeof(string));
            dt.Columns.Add("num8", typeof(string));
            dt.Columns.Add("num9", typeof(string));
            dt.Columns.Add("num10", typeof(string));


            //创建数据列号码①②③④⑤⑥⑦
            dt1.Columns.Add("num1", typeof(string));
            dt1.Columns.Add("num2", typeof(string));
            dt1.Columns.Add("num3", typeof(string));
            dt1.Columns.Add("num4", typeof(string));
            dt1.Columns.Add("num5", typeof(string));
            dt1.Columns.Add("num6", typeof(string));
            dt1.Columns.Add("num7", typeof(string));

            //创建数据列号码①②③④⑤⑥⑦
            dt2.Columns.Add("num1", typeof(string));
            dt2.Columns.Add("num2", typeof(string));
            dt2.Columns.Add("num3", typeof(string));
            dt2.Columns.Add("num4", typeof(string));
            dt2.Columns.Add("num5", typeof(string));
            dt2.Columns.Add("num6", typeof(string));
            dt2.Columns.Add("num7", typeof(string));

            //创建数据列号码①②③④⑤⑥⑦
            dt3.Columns.Add("num1", typeof(string));
            dt3.Columns.Add("num2", typeof(string));
            dt3.Columns.Add("num3", typeof(string));
            dt3.Columns.Add("num4", typeof(string));
            dt3.Columns.Add("num5", typeof(string));
            dt3.Columns.Add("num6", typeof(string));
            dt3.Columns.Add("num7", typeof(string));

            //创建数据列号码①②③④⑤⑥⑦
            dt4.Columns.Add("num1", typeof(string));
            dt4.Columns.Add("num2", typeof(string));
            dt4.Columns.Add("num3", typeof(string));
            dt4.Columns.Add("num4", typeof(string));
            dt4.Columns.Add("num5", typeof(string));
            dt4.Columns.Add("num6", typeof(string));
            dt4.Columns.Add("num7", typeof(string));
        }


        Boolean timeEnd = true;


        static int GetRandomSeed()
        {
            byte[] bytes = new byte[4];
            System.Security.Cryptography.RNGCryptoServiceProvider rng = new System.Security.Cryptography.RNGCryptoServiceProvider();
            rng.GetBytes(bytes);
            return BitConverter.ToInt32(bytes, 0);
        }

        public void doWork(int ks, int jz, DevComponents.DotNetBar.Controls.ProgressBarX Pb)
        {
            //string[,] aray; // 1000行，6列
            Pb.Maximum = jz;
            for (int ii = ks; ii < jz; ii++)
            {
                Random rnd = new Random(GetRandomSeed());
                int[] num = new int[numCount];
                Pb.Value = ii;
                Pb.Text = ii.ToString() + "/" + jz.ToString();
                //Application.DoEvents();
                //aray = new string[1, 7];0
                while (true)
                {
                    for (int i = 0; i < numCount; i++)
                    {
                        Boolean cfnum = false;
                        string rndnum;
                        while (true)
                        {
                            rndnum = rnd.Next(1, numMAX).ToString();
                            //num[0] = int.Parse(rndnum);
                            //undisplay(i, rndnum);
                            //Thread.Sleep(int.Parse(textBox1.Text));
                            Application.DoEvents();

                            //int tmp = Array.IndexOf(num, rndnum);
                            //if (tmp == -1)
                            //{
                            //    num[i] = int.Parse(rndnum);
                            //    break;
                            //}
                            //else continue;


                            for (int c = 0; c < numCount; c++)
                            {
                                if (num[c] == int.Parse(rndnum))
                                {
                                    cfnum = true;
                                    break;
                                }
                                else
                                {
                                    cfnum = false;
                                }
                            }
                            if (cfnum == false)
                            {
                                num[i] = int.Parse(rndnum);
                                //undisplay(i, rndnum);
                                // aray[0, i] = rndnum;
                                break;
                            }
                        }
                    }
                    //八卦阵判断
                    int bgzCount = 0;
                    for (int cc = 0; cc < 8; cc++)
                    {
                        for (int nn = 0; nn < 4; nn++)
                        {
                            int tmp = Array.IndexOf(num, bgz[cc, nn]);
                            if (tmp != -1) bgzCount++;
                        }
                        if (bgzCount >= 3) break;
                        else bgzCount = 0;
                    }
                    if (bgzCount < 3) break;
                }
                //iiCount++;

                Array.Sort(num);




                //蓝号
                string xx = rnd.Next(1, 17).ToString();
                //userControl17.unbuttontext = xx;

                lock (dt)
                {
                    if (numCount == 6)
                    {
                        DataRow dr = dt.NewRow();
                        dr["num1"] = num[0];//aray[0, 0];
                        dr["num2"] = num[1];//aray[0, 1];
                        dr["num3"] = num[2];//aray[0, 2];
                        dr["num4"] = num[3];//aray[0, 3];
                        dr["num5"] = num[4];//aray[0, 4];
                        dr["num6"] = num[5];//aray[0, 5];
                        dr["num7"] = xx; //aray[0, 6];
                        dt.Rows.Add(dr);
                    } else
                    {
                        DataRow dr = dt.NewRow();
                        dr["num1"] = num[0];//aray[0, 0];
                        dr["num2"] = num[1];//aray[0, 1];
                        dr["num3"] = num[2];//aray[0, 2];
                        dr["num4"] = num[3];//aray[0, 3];
                        dr["num5"] = num[4];//aray[0, 4];
                        dr["num6"] = num[5];//aray[0, 5];
                        dr["num7"] = num[6];//aray[0, 5];
                        dr["num8"] = num[7];//aray[0, 5];
                        dr["num9"] = num[8];//aray[0, 5];
                        dr["num10"] = num[9];//aray[0, 5];
                        dt.Rows.Add(dr);
                    }
                }
            }
            dtEndtime = DateTime.Now;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            dtStart = DateTime.Now;
            //等分
            int ii_sum = int.Parse(textBox2.Text.ToString());
            int zc, ys; //
            zc = ii_sum / 100;
            ys = ii_sum % 10;

            ParallelOptions options = new ParallelOptions();
            options.MaxDegreeOfParallelism = 2; // 最大并行度，并行的任务有几个

            #region task方式
            //var tthread = new Task[10];

            //for (int i = 0; i < 10; i++)
            //{
            //    object ob_Label;
            //    ob_Label = this.GetType().GetField("progressBarX" + (i+1).ToString(), System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).GetValue(this);
            //    tthread[i] = Task.Run(() =>
            //    {
            //        doWork(1, zc, (DevComponents.DotNetBar.Controls.ProgressBarX)ob_Label);
            //    });
            //}

            //Task.WhenAll(tthread).ContinueWith(t =>
            //{
            //    dtEndtime = DateTime.Now;
            //    label7.Text = "用时:" + (dtEndtime - dtStart).ToString();

            //});
            //dataGridView1.DataSource = dt;
            //WriteTextFile(dt, @"c:\\2.dat", checkBox1.Checked);
            #endregion

            for (int oo = 0; oo < 100; oo++)
            {

                //构造多任务
                dt.Reset();
                dt.Columns.Add("num1", typeof(string));
                dt.Columns.Add("num2", typeof(string));
                dt.Columns.Add("num3", typeof(string));
                dt.Columns.Add("num4", typeof(string));
                dt.Columns.Add("num5", typeof(string));
                dt.Columns.Add("num6", typeof(string));
                dt.Columns.Add("num7", typeof(string));
                if (numCount > 6)
                {
                    dt.Columns.Add("num8", typeof(string));
                    dt.Columns.Add("num9", typeof(string));
                    dt.Columns.Add("num10", typeof(string));
                }
                Parallel.For(0, 3, i =>
                {

                    object ob_Label;
                    ob_Label = this.GetType().GetField("progressBarX" + (i + 1).ToString(), System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).GetValue(this);
                    doWork(1, zc / 3, (DevComponents.DotNetBar.Controls.ProgressBarX)ob_Label);
                    //WriteTextFile(dt, @"c:\\1.dat", checkBox1.Checked);
                });

                dtEndtime = DateTime.Now;
                label7.Text = "第" + oo.ToString() + "轮用时:" + (dtEndtime - dtStart).ToString();
                dataGridView1.DataSource = dt;
                WriteTextFile(dt, @"c:\\5555.dat", checkBox1.Checked);

            };
        }


        //private void button1_Click(object sender, EventArgs e)
        //{

        //    //timer1.Interval = int.Parse(textBox1.Text.ToString());
        //    //timer1.Enabled = true;
        //    progressBar1.Maximum = int.Parse(textBox2.Text);
        //    progressBarX1.Maximum = int.Parse(textBox2.Text);
        //    progressBarX1.Enabled = true;
        //    button1.Enabled = false;
        //    aray = new string[int.Parse(textBox2.Text), 7];
        //    dtStart = DateTime.Now;

        //        System.DateTime.Now.TimeOfDay.ToString();
        //    for (int ii = 1; ii < int.Parse(textBox2.Text); ii++)
        //    {
        //        Random rnd = new Random(GetRandomSeed());
        //        string[] num = new string[6];
        //        progressBar1.Value = ii;
        //        progressBarX1.Value = ii;
        //        progressBarX1.Text = ii.ToString() + "/" + int.Parse(textBox2.Text);
        //        for (int i = 0; i < 6; i++)
        //        {

        //            Boolean cfnum = false;
        //            string rndnum;
        //            //while (true)
        //           // {
        //                while (true)
        //                {
        //                    rndnum = rnd.Next(1, 34).ToString();
        //                    undisplay(i, rndnum);
        //                    //Thread.Sleep(int.Parse(textBox1.Text));
        //                    Application.DoEvents();
        //                    //foreach(string aa in num)
        //                    //{
        //                    //    if (aa == rndnum)
        //                    //    { 
        //                    //        cfnum = true; 
        //                    //        break;
        //                    //    } else cfnum = false;
        //                    //}
        //                    for (int c = 0; c < 6; c++)
        //                    {
        //                        if (num[c] == rndnum)
        //                        {
        //                            cfnum = true;
        //                            break;
        //                        }
        //                        else
        //                        {
        //                            cfnum = false;
        //                        }
        //                    }
        //                    if (cfnum == false)
        //                    {
        //                        num[i] = rndnum;
        //                        undisplay(i, rndnum);
        //                        aray[ii, i] = rndnum;
        //                        break;
        //                    }
        //                }
        //        }
        //        userControl17.unbuttontext = rnd.Next(1, 17).ToString();
        //        aray[ii, 6] = userControl17.unbuttontext;
        //        iiCount++;
        //        DataRow dr = dt.NewRow();
        //        dr["num1"] = aray[ii, 0];
        //        dr["num2"] = aray[ii, 1];
        //        dr["num3"] = aray[ii, 2];
        //        dr["num4"] = aray[ii, 3];
        //        dr["num5"] = aray[ii, 4];
        //        dr["num6"] = aray[ii, 5];
        //        dr["num7"] = aray[ii, 6];
        //        dt.Rows.Add(dr);

        //        //dataGridView1.DataSource = dt;

        //        //string araylist = aray[ii, 0] + "," + aray[ii, 1] + "," + aray[ii, 2] + "," + aray[ii, 3] + "," + aray[ii, 4] + ","
        //        //                 + aray[ii, 5] + "-" + aray[ii, 6] + Environment.NewLine;
        //        //textBox3.AppendText(araylist);

        //        //List list = aray.ToList();

        //        //System.IO.File.WriteAllText(@"c:\\1.dat",x.ToString(), Encoding.Default);


        //    }
        //    button1.Enabled = true;
        //    dtEndtime = DateTime.Now;
        //    dataGridView1.DataSource = dt;
        //    label7.Text = "用时:" + (dtEndtime - dtStart).ToString();
        //    WriteTextFile(dt, @"c:\\1.dat",checkBox1.Checked);

        //}

        private void timer1_Tick(object sender, EventArgs e)
        {
            timeEnd = false; //多少秒后触发一次

        }

        public void WriteTextFile(DataTable dt, string TextFile, bool IBappend = false)
        {
            StringBuilder sbText = new StringBuilder();
            string splitStr = ",";
            foreach (DataRow dr in dt.Rows)
            {
                Application.DoEvents();
                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (dr[i] != DBNull.Value)
                        sbText.Append(dr[i].ToString());
                    if (i < dt.Columns.Count - 1)
                        sbText.Append(splitStr);
                }
                sbText.Append("\r\n");
            }
            System.IO.StreamWriter sw = new System.IO.StreamWriter(TextFile, IBappend, System.Text.Encoding.Default);
            sw.Write(sbText.ToString());
            sw.Close();
        }

        /// <summary>
        ///  读取Text文件，把数据存放到DataTable
        /// </summary>
        /// <param name="dt">存放数据的DataTable</param>
        /// <param name="TextFile">Text文件名</param>
        public void ReadTextFile(ref DataTable dts, string TextFile)
        {
            dts.Rows.Clear();

            iiReadRec = 0;
            if (System.IO.File.Exists(TextFile))
            {
                System.IO.FileStream fs = new System.IO.FileStream(TextFile, System.IO.FileMode.Open);
                System.IO.StreamReader m_streamReader = new System.IO.StreamReader(fs, System.Text.Encoding.Default);
                //m_streamReader.BaseStream.Seek(0, System.IO.SeekOrigin.Begin);
                string strLine = m_streamReader.ReadLine();
                char splitStr = ',';
                int iirow = 0; //第几行
                //读取文件内容
                while (!string.IsNullOrEmpty(strLine))
                {
                    iirow++;
                    label3.Text = "正在读取[" + iirow.ToString() + "]行数据。";
                    Application.DoEvents();
                    DataRow drNew = dts.NewRow();
                    string[] arrItem = strLine.Split(new char[] { splitStr }, StringSplitOptions.None);
                    for (int i = 0; i < arrItem.Length; i++)
                    {
                        if (i < dts.Columns.Count)
                        {
                            drNew[i] = arrItem[i];
                        }
                        else
                        {
                            break;
                        }
                    }
                    iiReadRec++;
                    dts.Rows.Add(drNew);
                    strLine = m_streamReader.ReadLine();
                }
                m_streamReader.Close();
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            ReadTextFile(ref dt1, @"c:\\3.dat");
            label3.Text = "共计读取" + iiReadRec.ToString() + "条记录.";
            dataGridView2.DataSource = dt1;
        }

        public bool jopd(int num)
        {
            if (num % 2 == 0)
            {
                return true;
            }
            else return false;
        }

        private void button3_Click(object sender, EventArgs e)
        {
            try
            {
                sumRec = int.Parse(textBox3.Text) + int.Parse(textBox4.Text) + int.Parse(textBox5.Text) +
                         int.Parse(textBox6.Text) + int.Parse(textBox7.Text) + int.Parse(textBox8.Text) +
                         int.Parse(textBox9.Text);
                js = 0; os = 0;
                if (int.Parse(textBox3.Text) % 2 == 0)
                {
                    os++;
                }
                else js++;
                if (int.Parse(textBox4.Text) % 2 == 0)
                {
                    os++;
                }
                else js++;
                if (int.Parse(textBox5.Text) % 2 == 0)
                {
                    os++;
                }
                else js++;
                if (int.Parse(textBox6.Text) % 2 == 0)
                {
                    os++;
                }
                else js++;
                if (int.Parse(textBox7.Text) % 2 == 0)
                {
                    os++;
                }
                else js++;
                if (int.Parse(textBox8.Text) % 2 == 0)
                {
                    os++;
                }
                else js++;
                if (int.Parse(textBox9.Text) % 2 == 0)
                {
                    os++;
                }
                else js++;

                label4.Text = "合值:" + sumRec.ToString();
                label6.Text = "奇" + js.ToString() + "/" + "偶" + os.ToString();
            }
            catch
            {

            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            int iiSum = 0;
            dt2.Rows.Clear();
            for (int i = 0; i < dt1.Rows.Count; i++)
            {
                Application.DoEvents();
                int[] xx = new int[7];
                xx[0] = int.Parse(dt1.Rows[i][0].ToString());
                xx[1] = int.Parse(dt1.Rows[i][1].ToString());
                xx[2] = int.Parse(dt1.Rows[i][2].ToString());
                xx[3] = int.Parse(dt1.Rows[i][3].ToString());
                xx[4] = int.Parse(dt1.Rows[i][4].ToString());
                xx[5] = int.Parse(dt1.Rows[i][5].ToString());
                xx[6] = int.Parse(dt1.Rows[i][6].ToString());


                int tmpJS = 0, tmpOS = 0;
                if (xx[0] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[1] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[2] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[3] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[4] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[5] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[6] % 2 == 0) { tmpOS++; } else tmpJS++;


                if (xx[0] + xx[1] + xx[2] + xx[3] + xx[4] + xx[5] + xx[6] == sumRec && tmpOS == os && tmpJS == js)
                {

                    DataRow dr = dt2.NewRow();
                    dr[0] = xx[0].ToString();
                    dr[1] = xx[1].ToString();
                    dr[2] = xx[2].ToString();
                    dr[3] = xx[3].ToString();
                    dr[4] = xx[4].ToString();
                    dr[5] = xx[5].ToString();
                    dr[6] = xx[6].ToString();
                    dt2.Rows.Add(dr);
                    //dataGridView3.DataSource = dt2;
                    iiSum++; //满足条件记录数
                }
            }

            dt2 = GetDistinctTable(dt2);

            dataGridView3.DataSource = dt2;

            label5.Text = "共计" + iiSum.ToString() + "条数据满足条件." + "去重复数据后:" + dt2.Rows.Count.ToString();
        }

        private void button6_Click(object sender, EventArgs e)
        {
            int[] cc = new int[34];
            Label lbtxt = new Label();
            int labelnum = 8;
            int ibsum = 0;
            label41.Text = "记录总数" + dt4.Rows.Count.ToString();
            for (int i = 1; i < 34; i++)
            {
                //Application.DoEvents();

                for (int o = 0; o < dt4.Rows.Count; o++)
                {
                    Application.DoEvents();
                    for (int c = 0; c < 6; c++)
                    {
                        string tmp = dt4.Rows[o][c].ToString();
                        if (i == int.Parse(tmp))
                        {
                            cc[i]++;
                            break;
                        }
                    }
                }
                ibsum = ibsum + cc[i];
                object ob_Label;
                ob_Label = this.GetType().GetField("label" + (labelnum).ToString(), System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).GetValue(this);
                Label lb_label;
                lb_label = (System.Windows.Forms.Label)ob_Label;
                float xx = (float)cc[i];
                float xx1 = (float)dt4.Rows.Count;
                float xx2 = (xx / xx1) * 100;
                lb_label.Text = (int)xx2 + "%";
                labelnum++;
            }
            label41.Text = "所有号码合值" + ibsum.ToString();
        }

        #region datatable去重
        /// <summary>
        /// datatable去重
        /// </summary>
        /// <param name="dtSource">需要去重的datatable</param>
        /// <param name="columnNames">依据哪些列去重</param>
        /// <returns></returns>
        public static DataTable GetDistinctTable(DataTable dtSource, params string[] columnNames)
        {
            DataTable distinctTable = dtSource.Clone();
            try
            {
                if (dtSource != null && dtSource.Rows.Count > 0)
                {
                    DataView dv = new DataView(dtSource);
                    distinctTable = dv.ToTable(true, columnNames);
                }
            }
            catch (Exception ee)
            {
                MessageBox.Show(ee.ToString());
            }
            return distinctTable;
        }

        /// <summary>
        /// datatable去重
        /// </summary>
        /// <param name="dtSource">需要去重的datatable</param>
        /// <returns></returns>
        public static DataTable GetDistinctTable(DataTable dtSource)
        {
            DataTable distinctTable = null;
            try
            {
                if (dtSource != null && dtSource.Rows.Count > 0)
                {
                    string[] columnNames = GetTableColumnName(dtSource);
                    DataView dv = new DataView(dtSource);
                    distinctTable = dv.ToTable(true, columnNames);
                }
            }
            catch (Exception ee)
            {
                MessageBox.Show(ee.ToString());
            }
            return distinctTable;
        }
        #endregion
        private void button5_Click(object sender, EventArgs e)
        {
            string[] xx = new string[7];
            xx[0] = textBox10.Text.ToString();
            xx[1] = textBox11.Text.ToString();
            xx[2] = textBox12.Text.ToString();
            xx[3] = textBox13.Text.ToString();
            xx[4] = textBox14.Text.ToString();
            xx[5] = textBox15.Text.ToString();
            xx[6] = textBox16.Text.ToString();


            string sql = "(num1= '" + xx[0] + "' or num2='" + xx[0] + "' or num3 ='" + xx[0] + "' or num4 ='" + xx[0] + "' or num5='" + xx[0] + "' or num6='" + xx[0] + "') and " +
                         "(num1= '" + xx[1] + "' or num2='" + xx[1] + "' or num3 ='" + xx[1] + "' or num4 ='" + xx[1] + "' or num5='" + xx[1] + "' or num6='" + xx[1] + "') and " +
                         "(num1= '" + xx[2] + "' or num2='" + xx[2] + "' or num3 ='" + xx[2] + "' or num4 ='" + xx[2] + "' or num5='" + xx[2] + "' or num6='" + xx[2] + "') and " +
                         "(num1= '" + xx[3] + "' or num2='" + xx[3] + "' or num3 ='" + xx[3] + "' or num4 ='" + xx[3] + "' or num5='" + xx[3] + "' or num6='" + xx[3] + "') and " +
                         "(num1= '" + xx[4] + "' or num2='" + xx[4] + "' or num3 ='" + xx[4] + "' or num4 ='" + xx[4] + "' or num5='" + xx[4] + "' or num6='" + xx[4] + "') and " +
                         "(num1= '" + xx[5] + "' or num2='" + xx[5] + "' or num3 ='" + xx[5] + "' or num4 ='" + xx[5] + "' or num5='" + xx[5] + "' or num6='" + xx[5] + "') ";// and " +                         "(num7= '"+ xx[6]+"')";

            DataRow[] ddrow = dt1.Select(sql);

            DataTable dtnew = dt.Clone();//克隆结构
            for (int i = 0; i < ddrow.Length; i++)
            {
                dtnew.ImportRow(ddrow[i]);
            }
            label3.Text = "共计查询" + ddrow.Length.ToString() + "条记录!";
            dataGridView2.DataSource = dtnew;


        }

        private void panel9_Paint(object sender, PaintEventArgs e)
        {

        }
        //public delegate void CallBackDelegate();//定义一个委托实现回调函数

        /// <summary>
        /// 回调函数
        /// </summary>
        private void CallBack()
        {
            textBox55.Text += "执行完成";
        }

        int iiSum = 0;
        public void mutilTask(string iiks)
        {
            int int_js, int_os, int_hz;

            int_js = int.Parse(textBox51.Text.ToString());
            int_os = int.Parse(textBox52.Text.ToString());
            int_hz = int.Parse(textBox53.Text.ToString());

            string[] sArray = iiks.Split('/');

            for (int i = int.Parse(sArray[0]); i < int.Parse(sArray[1]); i++)
            {
                Application.DoEvents();
                //progressBarX1.Value = i;
                //progressBarX1.Text = i.ToString() + "/" + dt1.Rows.Count.ToString();
                int[] xx = new int[7];
                xx[0] = int.Parse(dt1.Rows[i][0].ToString());
                xx[1] = int.Parse(dt1.Rows[i][1].ToString());
                xx[2] = int.Parse(dt1.Rows[i][2].ToString());
                xx[3] = int.Parse(dt1.Rows[i][3].ToString());
                xx[4] = int.Parse(dt1.Rows[i][4].ToString());
                xx[5] = int.Parse(dt1.Rows[i][5].ToString());
                xx[6] = int.Parse(dt1.Rows[i][6].ToString());


                int tmpJS = 0, tmpOS = 0;
                if (xx[0] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[1] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[2] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[3] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[4] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[5] % 2 == 0) { tmpOS++; } else tmpJS++;
                if (xx[6] % 2 == 0) { tmpOS++; } else tmpJS++;


                if (xx[0] + xx[1] + xx[2] + xx[3] + xx[4] + xx[5] + xx[6] == int_hz && tmpOS == int_os && tmpJS == int_js)
                {

                    if (dt4 != null)
                    {
                        lock (dt4)
                        {
                            DataRow dr = dt4.NewRow();
                            dr[0] = xx[0].ToString();
                            dr[1] = xx[1].ToString();
                            dr[2] = xx[2].ToString();
                            dr[3] = xx[3].ToString();
                            dr[4] = xx[4].ToString();
                            dr[5] = xx[5].ToString();
                            dr[6] = xx[6].ToString();
                            dt4.Rows.Add(dr);

                        }
                    }
                    //dataGridView3.DataSource = dt2;
                    iiSum++; //满足条件记录数

                }
            }

            //CallBackDelegate callBackDelegate = CallBackDelegate;
            //callBackDelegate();
            //dt4 = GetDistinctTable(dt4);

            //dataGridView4.DataSource = dt4;
            //textBox55.Text += "[" + sArray[0].ToString() + "]/[" + sArray[1].ToString() + "]" + "线程结束";
        }

        private void button7_Click(object sender, EventArgs e)
        {
            int int_js, int_os, int_hz, int_sum;
            int_js = int.Parse(textBox51.Text.ToString());
            int_os = int.Parse(textBox52.Text.ToString());
            int_hz = int.Parse(textBox53.Text.ToString());

            //整除
            int_sum = int.Parse(textBox54.Text.ToString());

            //MessageBox.Show(int_sum.ToString() + "/" + (int_sum / 10).ToString() + "/" + (int_sum % 10).ToString());
            int zc, ys; //
            zc = int_sum / 10;
            ys = int_sum % 10;

            int ks, jz;
            try
            {
                lock (dt4)
                {
                    dt4.Rows.Clear();
                }
            }
            catch { }

            label45.Text = "";
            iiSum = 0;

            for (int i = 0; i < 10; i++)
            {
                ks = zc * i;
                jz = zc * (i + 1);
                int iiks = (ks - 1 < 0) ? 0 : ks - 1;
                //CallBackDelegate cbd = CallBack;
                Thread t = new Thread(() =>
                {
                    //dt4 = GetDistinctTable(dt4);

                    mutilTask(iiks.ToString() + "/" + jz.ToString());

                });
                string txt = "[" + iiks.ToString() + "]/[" + jz.ToString() + "]";
                label45.Text += txt;
                t.Start();
                t.Join();
            }
            if (dt4 != null)
            {
                lock (dt4)
                {
                    dt4 = GetDistinctTable(dt4);
                }
            }
            dataGridView4.DataSource = dt4;
            textBox55.Text = iiSum.ToString() + "条记录";

            //ks[10] = jz[9];
            //jz[10] = int_sum;
            //int int_js, int_os, int_hz;
            //int iiSum = 0;
            //dt4.Rows.Clear();
            //int_js = int.Parse(textBox51.Text.ToString());
            //int_os = int.Parse(textBox52.Text.ToString());
            //int_hz = int.Parse(textBox53.Text.ToString());
            //progressBarX1.Maximum = dt1.Rows.Count;
            //for (int i = 0; i < int.Parse(textBox54.Text.ToString()); i++)
            //{
            //    Application.DoEvents();
            //    progressBarX1.Value = i;
            //    progressBarX1.Text = i.ToString() + "/" + dt1.Rows.Count.ToString();
            //    int[] xx = new int[7];
            //    xx[0] = int.Parse(dt1.Rows[i][0].ToString());
            //    xx[1] = int.Parse(dt1.Rows[i][1].ToString());
            //    xx[2] = int.Parse(dt1.Rows[i][2].ToString());
            //    xx[3] = int.Parse(dt1.Rows[i][3].ToString());
            //    xx[4] = int.Parse(dt1.Rows[i][4].ToString());
            //    xx[5] = int.Parse(dt1.Rows[i][5].ToString());
            //    xx[6] = int.Parse(dt1.Rows[i][6].ToString());


            //    int tmpJS = 0, tmpOS = 0;
            //    if (xx[0] % 2 == 0) { tmpOS++; } else tmpJS++;
            //    if (xx[1] % 2 == 0) { tmpOS++; } else tmpJS++;
            //    if (xx[2] % 2 == 0) { tmpOS++; } else tmpJS++;
            //    if (xx[3] % 2 == 0) { tmpOS++; } else tmpJS++;
            //    if (xx[4] % 2 == 0) { tmpOS++; } else tmpJS++;
            //    if (xx[5] % 2 == 0) { tmpOS++; } else tmpJS++;
            //    if (xx[6] % 2 == 0) { tmpOS++; } else tmpJS++;


            //    if (xx[0] + xx[1] + xx[2] + xx[3] + xx[4] + xx[5] + xx[6] == int_hz && tmpOS == int_os && tmpJS == int_js)
            //    {

            //        DataRow dr = dt4.NewRow();
            //        dr[0] = xx[0].ToString();
            //        dr[1] = xx[1].ToString();
            //        dr[2] = xx[2].ToString();
            //        dr[3] = xx[3].ToString();
            //        dr[4] = xx[4].ToString();
            //        dr[5] = xx[5].ToString();
            //        dr[6] = xx[6].ToString();
            //        dt4.Rows.Add(dr);
            //        //dataGridView3.DataSource = dt2;
            //        iiSum++; //满足条件记录数
            //    }
            //}
            //try
            //{
            //    dt4 = GetDistinctTable(dt4);

            //    dataGridView4.DataSource = dt4;

            //    //label45.Text = "共计" + iiSum.ToString() + "条数据满足条件." + "去重复数据后:" + dt4.Rows.Count.ToString();
            //}
            //catch
            //{
            //    label45.Text = "无满足条件数据";
            //}



        }

        /// <summary>
        /// 判断 二个数字串 近似度
        /// </summary>
        /// <param name="group1">第一数字串</param>
        /// <param name="group2">第二数字串</param>
        /// <param name="tolerance">阀值，可以设置 例 0.02</param>
        /// <returns></returns>
        public static bool AreApproxEqual(double[] group1, double[] group2, double tolerance)
        {
            if (group1.Length != group2.Length)
            {
                return false;
            }

            double avg1 = group1.Average();
            double avg2 = group2.Average();

            for (int i = 0; i < group1.Length; i++)
            {
                double n1, n2;
                n1 = Math.Abs(group1[i] - avg1);
                n2 = Math.Abs(group2[i] - avg2);
                if ( n1> tolerance && n2 > tolerance)
                {
                    // 如果任何一组的元素的差异超过容忍阈值，则不近似相等
                    return false;
                }
            }

            // 如果所有元素的差异都在容忍阈值以内，则认为这两组数字近似相等
            return true;
        }


        private void mutilTask()
        {
            throw new NotImplementedException();
        }

        private void dataGridView4_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {
            try
            {
                SolidBrush b = new SolidBrush(dataGridView4.RowHeadersDefaultCellStyle.ForeColor);
                e.Graphics.DrawString((e.RowIndex + 1).ToString(System.Globalization.CultureInfo.CurrentUICulture), dataGridView4.DefaultCellStyle.Font, b, e.RowBounds.Location.X + 20, e.RowBounds.Location.Y + 4);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        private void button8_Click(object sender, EventArgs e)
        {
            dataGridView2.DataSource = dt1;
        }

        private void button9_Click(object sender, EventArgs e)
        {
            string dbName, Sa, PassWord, database;
            dbName = ".";
            Sa = "sa";
            PassWord = "hejc190";
            database = "cp";

            Conn = new OleDbConnection();
            Conn.ConnectionString = "Provider=sqloledb;Data Source=" + dbName.ToString().Trim() +
                                        ";Initial Catalog=" + database.Trim() + ";" +
                                        " User Id=" + Sa.ToString().Trim() +
                                        ";Password=" + PassWord.ToString().Trim() + ";Max Pool Size = 512;" +
                                        "Connection Timeout=500000";
            if (Conn.State == ConnectionState.Closed)
            {
                try
                {
                    // Conn.ConnectionTimeout = 300000;
                    Conn.Open();
                    ConnValue = Conn;
                }
                catch
                {
                    MessageBox.Show("连接数据库失败！");
                }

            }
        }

        public void ConnClose()
        {
            if (ConnValue.State == ConnectionState.Open)
            {
                ConnValue.Close();
                //th_wait.Abort();
            }
        }

        public Boolean Fzpcf(int[] hm, int[] grouphm, int findCount)
        {
            int bgzCount = 0;
            for (int cc = 0; cc < grouphm.Length; cc++)
            {
                int tmp = Array.IndexOf(hm, grouphm[cc]);
                if (tmp >= 0) bgzCount++;
            }
            if (bgzCount >= findCount)
            {
                return false;
            }
            else { return true; }
        }
        public Boolean 热温冷码判断(int[] hm, int[] grouphm, int[] findCount, int maxnum)
        {
            int bgzCount = 0;

            int[] numtmp = new int[maxnum];
            for (int i = 0; i < maxnum; i++)
            {
                numtmp[i] = hm[i];
            }


            for (int cc = 0; cc < grouphm.Length; cc++)
            {
                int tmp = Array.IndexOf(numtmp, grouphm[cc]);
                if (tmp >= 0) bgzCount++;
            }
            if (findCount.Contains(bgzCount)==true)
            {
                return false;
            }
            else { return true; }
        }

        public Boolean Fzpcf(int[] hm, int[] grouphm, int findCount, int maxnum)
        {
            int bgzCount = 0;

            int[] numtmp = new int[maxnum];
            for (int i = 0; i < maxnum; i++)
            {
                numtmp[i] = hm[i];
            }


            for (int cc = 0; cc < grouphm.Length; cc++)
            {
                int tmp = Array.IndexOf(numtmp, grouphm[cc]);
                if (tmp >= 0) bgzCount++;
            }
            if (bgzCount >= findCount)
            {
                return false;
            }
            else { return true; }
        }
        public Boolean FzpcfArray(int[] hm, int[,] grouphm, int findCount)
        {
            int bgzCount = 0;
            for (int cc = 0; cc < grouphm.GetLength(0); cc++)//可以理解为：第一维的长度（即行数），结果为2
            {
                for (int nn = 0; nn < grouphm.GetLength(1); nn++)//可以理解为：第二维的长度（即列数），结果为5
                {
                    int tmp = Array.IndexOf(hm, grouphm[cc, nn]);
                    if (tmp != -1) bgzCount++;
                }
                if (bgzCount >= findCount) { break; }
                else { bgzCount = 0; }
            }
            if (bgzCount >= findCount)
            {
                return false;
            }
            else { return true; }
        }

        public Boolean FzpcfArray(int[] hm, int[,] grouphm, int findCount, int maxnum)
        {
            int bgzCount = 0;
            int[] numtmp = new int[maxnum];
            for (int i = 0; i < maxnum; i++)
            {
                numtmp[i] = hm[i];
            }
            for (int cc = 0; cc < grouphm.GetLength(0); cc++)//可以理解为：第一维的长度（即行数），结果为2
            {

                for (int nn = 0; nn < grouphm.GetLength(1); nn++)//可以理解为：第二维的长度（即列数），结果为5
                {
                    int tmp = Array.IndexOf(numtmp, grouphm[cc, nn]);
                    if (tmp != -1) bgzCount++;
                }
                if (bgzCount >= findCount) { break; }
                else { bgzCount = 0; }
            }
            if (bgzCount >= findCount)
            {
                return false;
            }
            else { return true; }
        }

        public int[] randomList(int[] a)
        {
            int[] b = new int[33];//保存a随机排序后的数据
            Random rand = new Random();
            ArrayList list = new ArrayList();
            for (int j = 0; j < 33; j++)
            {
                list.Add(a[j]);
            }
            //随机存入数据
            for (int i = 33; i > 0; i--)
            {
                int c = rand.Next(0, i);//产生随机数
                b[i - 1] = (int)list[c];//随机选择一个数
                list.Remove(list[c]);//移除已经选择过的数
            }
            return b;
        }


        /// <summary>
        /// 定义一个委托
        /// </summary>
        /// <param name="cf"></param>
        /// <returns></returns>
        public delegate void setTextCallback(string text);

        /// <summary>
        /// 设置文本
        /// </summary>
        /// <param name="cf"></param>
        /// <returns></returns>
        public void setText(string txt)
        {
            if (label49.InvokeRequired)
            {
                setTextCallback s = new setTextCallback(setText);
                Invoke(s, new string[] { txt });
            }
            else
            {
                label49.Text = txt;
            }
        }
        int ljCurrentRecno = 0;

        public void zjhmgz(string hm, string info)
        {
            if (hm == "2,5,11,22,30,33,10")
            {
                listBox3.Items.Add("进入号码验证2,5,11,22,30,33,10");
                listBox3.Items.Add(info);
                listBox3.TopIndex = listBox3.Items.Count - (int)(listBox3.Height / listBox3.ItemHeight);
            }
        }

 

        public void 号码规则(int 计算期数)
        {

            //取10期数据放到build里
            int[] build = new int[计算期数 * 6];
            int buildint = 0;
            for (int co = 0; co < 计算期数; co++)
            {
                for (int co1 = 0; co1 < 6; co1++)
                {
                    build[buildint] = hm10[co,co1];
                    buildint++;
                }
            }
            // 集合 dic 用于存放统计结果
            Dictionary<int, ItemInfo> dic =
                new Dictionary<int, ItemInfo>();
            // 开始统计每个元素重复次数
            foreach (int v in build)
            {
                if (dic.ContainsKey(v))
                {
                    // 数组元素再次，出现次数增加 1
                    dic[v].RepeatNum += 1;
                }
                else
                {
                    // 数组元素首次出现，向集合中添加一个新项
                    // 注意 ItemInfo类构造函数中，已经将重复
                    // 次数设置为 1
                    dic.Add(v, new ItemInfo(v));
                }
            }
            var tt = dic.OrderByDescending(r => r.Value.RepeatNum);

            int 规则标准 = 计算期数 / 4;
            //以最近10期为数据标准，出现率高于3期的视为热码、等于3期的为温码、低于3期的为冷码
            for (int i = 0; i < tt.Count(); i++)
            {
                KeyValuePair<int, ItemInfo> kv = tt.ElementAt(i);
                if (kv.Value.RepeatNum > 规则标准) 热码.Add(kv.Value.Value);
                if (kv.Value.RepeatNum == 规则标准) 温码.Add(kv.Value.Value);
                if (kv.Value.RepeatNum < 规则标准) 冷码.Add(kv.Value.Value);
            }

            //取漏码
            int[] numbers = { 1, 2, 3, 4, 5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33};

            HashSet<int> dictionaryKeys = new HashSet<int>(dic.Keys);
            var numbersNotFound = numbers.Where(n => !dictionaryKeys.Contains(n)).ToList();

            //----

            listBox4.Items.Add("热码："+string.Join(",", 热码));
            listBox4.Items.Add("温码：" + string.Join(",", 温码));
            listBox4.Items.Add("冷码：" + string.Join(",", 冷码));
            listBox4.Items.Add("漏码：" + string.Join(",", numbersNotFound));

            //转换最后10期号码温热显示列
            string[][] 最后10期转换 = new string[计算期数][];
            for (int i = 0; i < 计算期数; i++)
            {
                int[] hm=  new int[6];
                hm[0] = hm10[i, 0];
                hm[1] = hm10[i, 1];
                hm[2] = hm10[i, 2];
                hm[3] = hm10[i, 3];
                hm[4] = hm10[i, 4];
                hm[5] = hm10[i, 5];
                最后10期转换[i] = new string[6];
                for (int ii=0;ii<6;ii++)
                {
                    if (热码.Contains(hm[ii]) == true) 最后10期转换[i][ii] = "热码";
                    if (温码.Contains(hm[ii]) == true) 最后10期转换[i][ii] = "温码";
                    if (冷码.Contains(hm[ii]) == true) 最后10期转换[i][ii] = "冷码";
                    if (漏码.Contains(hm[ii]) == true) 最后10期转换[i][ii] = "漏码";

                }
                string[] formattedNumbers = hm.Select(n => n.ToString("D2")).ToArray(); // 使用D2格式化为至少两位数
                listBox4.Items.Add(string.Join(",", formattedNumbers) +
                                   "," + string.Join(",", 最后10期转换[i].ToList()));
            }

            int[] hm1 = new int[7];
            int[] hm2 = new int[7];
            int index1 = 0;
            int index2 = 7;
            hm1[0] = hm10[index1, 0];
            hm1[1] = hm10[index1, 1];
            hm1[2] = hm10[index1, 2];
            hm1[3] = hm10[index1, 3];
            hm1[4] = hm10[index1, 4];
            hm1[5] = hm10[index1, 5];
            hm1[6] = hm10[index1, 6];

            hm2[0] = hm10[index2, 0];
            hm2[1] = hm10[index2, 1];
            hm2[2] = hm10[index2, 2];
            hm2[3] = hm10[index2, 3];
            hm2[4] = hm10[index2, 4];
            hm2[5] = hm10[index2, 5];
            hm2[6] = hm10[index2, 6];

            //new int[7]{ 21,8,9,15,2,7,3}, new int[7]{ 1,2,3,4,5,6,7}
            //double similarity = NumberSimilarityComparer.CalculateSimilarity(new int[7] { 1,2,3,5,7,8,9 }, new int[7] { 1, 2, 3, 4, 5, 6, 7 });
            decimal similarity = NumberSimilarityComparer.GetSimilarityWith(hm1,hm2); 
            listBox4.Items.Add("相似度：" + (similarity*100).ToString());

        }

        public int[] hmgzfx(int[] iirows, int[] jl)
        {
            Boolean ibTrue = false;
            string ibTrueInfo = "";
            while (true)
            {
                Application.DoEvents();
                int cgcs = 0; //

                //八卦阵判断
                //ibTrue = FzpcfArray(iirows, bgz, 3, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[八卦阵未通过]";

                ////集团码,若随机的号码里面组合有5个与该下列号码相同，就排除。
                //ibTrue = Fzpcf(iirows, jthm, 5, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[集团码未通过]";

                ////万能码,如果你选择的号码里面没有以下号码其中之一，就排除。
                //ibTrue = Fzpcf(iirows, wlm, 1, 6);
                //if (ibTrue == false) cgcs++; else ibTrueInfo += "[万能码未通过]";

                ////神7数字
                ////ibTrue = Fzpcf(iirows, s7sz, 1, 6);
                ////if (ibTrue == false) cgcs++; else ibTrueInfo += "[神7数字未通过]";

                ////质数
                //ibTrue = Fzpcf(iirows, zshm, 1, 6);
                //if (ibTrue == false) cgcs++; else ibTrueInfo += "[质数未通过]";

                ////2,3,6,7,9尾
                //ibTrue = Fzpcf(iirows, w23679w, 1, 6);
                //if (ibTrue == false) cgcs++; else ibTrueInfo += "[23679尾未通过]";

                ////分组排除法
                //// hm1
                //ibTrue = FzpcfArray(iirows, hm1, 4, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm1未通过]";

                ////hm2
                //ibTrue = Fzpcf(iirows, hm2, 4, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm2未通过]";

                ////hm3
                //ibTrue = FzpcfArray(iirows, hm3, 3, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm3未通过]";

                ////hm4
                //ibTrue = FzpcfArray(iirows, hm4, 5, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm4未通过]";

                ////hm5
                //ibTrue = FzpcfArray(iirows, hm5, 5, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm5未通过]";

                ////hm6
                //ibTrue = Fzpcf(iirows, hm6, 5, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm6未通过]";

                ////hm7
                //ibTrue = FzpcfArray(iirows, hm7, 5, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm7未通过]";

                ////hm8
                //ibTrue = Fzpcf(iirows, hm8, 5, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm8未通过]";

                ////hm9
                //ibTrue = FzpcfArray(iirows, hm9, 5, 6);
                //if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm9未通过]";

                //在我选择的15号码里面去匹配
                //ibTrue = FzpcfArray(iirows, hm11, 6);
                //int[] tmp = { 1, 3, 4, 5, 7, 9, 11, 13, 14, 15, 17, 19, 22, 23, 25, 28, 30, 31, 32, 33 };
                //int[] tmp1 = { 2, 6, 8, 10, 12, 16, 18, 20, 21, 24, 26, 27, 29 };
                //int[] tmp2 = { 3,4,7,11,12,15,17,24,27,29,30,33 };  //12码




                //
                //int[] tmp3 = { 01, 04, 09, 10, 11, 18, 19, 20, 25, 28, 32, 33 };//12码
                int[] tmp3 = 号码资源.ToArray();

                //int[] tmp3 = { 1, 2, 3, 4, 5,6, 7, 8,9, 10,11,12, 13, 14, 15,16, 17, 18, 19, 20,21, 22, 23, 24, 25, 26, 27,28, 29, 30, 31,32, 33 };  //24号中一等奖一期
                ibTrue = Fzpcf(iirows, tmp3, 4, 6);
                if (ibTrue == false) cgcs++; else ibTrueInfo += "[12码未通过]";

                //历史号码比对
                //ibTrue = FzpcfArray(iirows, hm10, 5, 6);
                //if (ibTrue == true) cgcs++;
                //else
                //{
                //    //listBox1.Items.Add(">>>>>>>> 历史中奖 >>>>>>>" + string.Join(",", iirows));
                //    ibTrueInfo += "[历史号码未通过]";
                //}
                //this.Invoke(new Action(() =>
                //{
                zjhmgz(string.Join(",", iirows), ibTrueInfo);
                //}));
                //if (string.Join(",", iirows) == "9,10,13,19,24,32,1")
                //{
                //    MessageBox.Show("stop");
                //}


                if (cgcs != 1) ibTrue = false;

                else
                {
                    ////号码出现机率要达到平均值
                    //string sqlsum = string.Format("select sum(bfl) from cpp_bfl where num in ({0},{1},{2},{3},{4},{5},{6})",
                    //                            iirows[0], iirows[1], iirows[2], iirows[3], iirows[4], iirows[5], iirows[6]);
                    ////Conn.Open();
                    ////ConnValue = Conn;
                    //OleDbCommand mysum = new OleDbCommand(sqlsum, ConnValue);
                    //decimal decimal_mysumresult = (decimal)mysum.ExecuteScalar();
                    //ConnClose();
                    decimal decimal_mysumresult = bfltable[(int)GetIndexOfElement(bfltable, iirows[0])][1] +
                                                  bfltable[(int)GetIndexOfElement(bfltable, iirows[1])][1] +
                                                  bfltable[(int)GetIndexOfElement(bfltable, iirows[2])][1] +
                                                  bfltable[(int)GetIndexOfElement(bfltable, iirows[3])][1] +
                                                  bfltable[(int)GetIndexOfElement(bfltable, iirows[4])][1] +
                                                  bfltable[(int)GetIndexOfElement(bfltable, iirows[5])][1];// +
                                                                                                           //bfltable[(int)GetIndexOfElement(bfltable, iirows[6])][1];


                    decimal decimal_myavg = decimal.Parse(label50.Text.ToString());
                    decimal OK_myMAX = decimal_myavg + (decimal)0.035; //0.012
                    decimal OK_myMIN = decimal_myavg - (decimal)0.035;

                    double[] currentNum = { double.Parse(iirows[0].ToString()),
                        double.Parse(iirows[1].ToString()),
                        double.Parse(iirows[2].ToString()),
                        double.Parse(iirows[3].ToString()),
                        double.Parse(iirows[4].ToString()),
                        double.Parse(iirows[5].ToString()),
                        double.Parse(iirows[6].ToString()),
                    };
                    double[] kjnum =
                    {
                        double.Parse(hm10[0,0].ToString()),
                        double.Parse(hm10[0,1].ToString()),
                        double.Parse(hm10[0,2].ToString()),
                        double.Parse(hm10[0,3].ToString()),
                        double.Parse(hm10[0,4].ToString()),
                        double.Parse(hm10[0,5].ToString()),
                        double.Parse(hm10[0,6].ToString()),
                    };
                    
                    if (decimal_mysumresult > OK_myMIN && decimal_mysumresult < OK_myMAX)
                    //if (true)
                    {
                        //ibTrue = true;
                        //int[] xm = { 1, 7, 14, 15, 16, 27, 28, 32, 33 };
                        //ibTrue = Fzpcf(iirows, zbh, 3, 6);
                        //if (ibTrue == false) ibTrue = true; else ibTrue = false;
                        int[] xxnumtmp = new int[16];
                        int[] xxnumtmp1 = new int[16];
                        int[] xxnumtmp2 = new int[16];
                        int[] xxnumtmp3 = new int[12];
                        int[] left5w = new int[5]; //前五位出现机率最大的号
                        int[] right5w = new int[5]; //最后五位出现机率最小的号
                        int result = 0;
                        Array.Copy(zbh, 0, xxnumtmp, 0, 16);
                        Array.Copy(zbh, 5, xxnumtmp1, 0, 16);
                        Array.Copy(zbh, 8, xxnumtmp2, 0, 16);
                        Array.Copy(zbh, 21, xxnumtmp3, 0, 12);

                        Array.Copy(zbh, 0, left5w, 0, 5);
                        Array.Copy(zbh, 28, right5w, 0, 5);

                        //if (Fzpcf(iirows, xxnumtmp, jl[0], 6) == false) result++;
                        //if (Fzpcf(iirows, xxnumtmp1, jl[1], 6) == false) result++;
                        //if (Fzpcf(iirows, xxnumtmp2, jl[2], 6) == false) result++;
                        //if (Fzpcf(iirows, xxnumtmp3, jl[3], 6) == false) result++;

                        int[][] xm1 =
                        {
                                    new int[9]{1,2,3,4,5,6,7,8,9},
                                    new int[10]{10,11,12,13,14,15,16,17,18,19},
                                    new int[10]{20,21,22,23,24,25,26,27,28,29},
                                    new int[4]{30,31,32,33}
                         };
                        //if (Fzpcf(iirows, xm1[0], 1, 6) == false) result++; else { ibTrueInfo += "[01-09出现数大于2]"; }
                        //if (Fzpcf(iirows, xm1[1], 2, 6) == false) result++; else { ibTrueInfo += "[10-19出现数大于1]"; }
                        //if (Fzpcf(iirows, xm1[2], 2, 6) == false) result++; else { ibTrueInfo += "[20-29出现数大于1]"; }
                        //if (Fzpcf(iirows, xm1[3], 1, 6) == false) result++; else { ibTrueInfo += "[30-33出现数大于2]"; }

                        if (AreApproxEqual(kjnum,currentNum,11.15)== true) { result++; } else { ibTrueInfo += "[近似度没有通过]"; }

                        //判断:一组号码里有1-2个的热码，否则，取消
                        if (热温冷码判断(iirows, 热码.ToArray(), 热码数量, 6) == false) { result++; } else { ibTrueInfo += "[热码数量不足]"; }
                        //判断:一组号码里有2-4个的冷码，否则，取消
                        if (热温冷码判断(iirows, 冷码.ToArray(), 冷码数量, 6) == false) { result++; } else { ibTrueInfo += "[冷码数量不足]"; }
                        //判断:一组号码里有2-4个的温码，否则，取消
                        if (热温冷码判断(iirows, 温码.ToArray(), 温码数量, 6) == false) { result++; } else { ibTrueInfo += "[温码数量不足]"; }
                        //判断：一组号码里有三个0-9小号的，取消
                        if (Fzpcf(iirows, xm1[0], 3, 6) == true) { result++; } else { ibTrueInfo += "[0-9有3个]"; }
                        //////判断：一组号码里有四个10-19号的，取消
                        if (Fzpcf(iirows, xm1[1], 4, 6) == true) { result++; } else { ibTrueInfo += "[10-19有4个]"; }
                        //////判断：一组号码里有四个20-29号的，取消
                        if (Fzpcf(iirows, xm1[2], 4, 6) == true) { result++; } else { ibTrueInfo += "[20-29有4个]"; }
                        //////判断：一组号码里有三个30-33号的，取消
                        if (Fzpcf(iirows, xm1[3], 3, 6) == true) { result++; } else { ibTrueInfo += "[30-33有3个]"; }
                        //////判断：一组号码里有三个或以上连续的号码，取消
                        if (ContinueNumLenth(iirows) < 3) { result++; } else { ibTrueInfo += "[三个或以上连续的号码]"; }
                        //判断：一组号码里有二组或以上连续的号码，取消
                        //如  1，2，4，5，16，18+11 ，1-2，4-5就是二组连续号码
                        if (QueueString(iirows) <= 2) result++;

                        //L012路判断
                        //只留123；312
                        int L0 = 0, L1 = 0, L2 = 0;
                        for (int i=0;i<iirows.Length -1;i++)
                        {
                            if (iirows[i] % 3 == 0) L0 += 1;
                            if (iirows[i] % 3 == 1) L1 += 1;
                            if (iirows[i] % 3 == 2) L2 += 1;
                        }
                        string sL1 = "";
                        sL1 = L0.ToString() + ":" + L1.ToString() + ":" + L2.ToString();

                        if (sL1 == "1:2:3" || sL1 == "3:1:2" || sL1 == "2:1:3" || sL1 == "2:3:1" || sL1 == "1:3:2") result++; else { ibTrueInfo += "[L012路没通过]"; }
                        //号码相似度规则判断，用的规则表
                        if (hmxsdArray(iirows, hmxsd, 5, int.Parse(cxcs.Text.ToString()), 6) == false) { result++; } else { ibTrueInfo += "号码相似度验证失败."; }

                        //if (Fzpcf(iirows, left5w, 1, 6) == false) result++;   //前五位出现机率至少1个号码
                        //if (Fzpcf(iirows, right5w, 1, 6) == false) result++;  //后五位出现机率至少1个号码 

                        int hmsum = iirows[0] + iirows[1] + iirows[2] + iirows[3] + iirows[4] + iirows[5];
                        if (hmsum > 70 && hmsum < 130) result++; else { ibTrueInfo += "[合值不在70-130之间]"; }

                        zjhmgz(string.Join(",", iirows), ibTrueInfo);
                        if (result == 13) ibTrue = true; else ibTrue = false;



                    }
                    else
                    {
                        ibTrue = false;
                        ibTrueInfo += decimal_mysumresult.ToString() + "出现机率未通过";
                        //this.Invoke(new Action(() => {
                        zjhmgz(string.Join(",", iirows), ibTrueInfo);
                        //}));
                    }
                }
                break;
            }

            if (ibTrue == true)
            {
                return iirows;

            }
            else return null;

        }


        public DataTable doworkfx(DataTable dtsource, int[] wz)
        {
            DataTable dt_save = new DataTable();
            dt_save.Columns.Add("num1", typeof(string));
            dt_save.Columns.Add("num2", typeof(string));
            dt_save.Columns.Add("num3", typeof(string));
            dt_save.Columns.Add("num4", typeof(string));
            dt_save.Columns.Add("num5", typeof(string));
            dt_save.Columns.Add("num6", typeof(string));
            dt_save.Columns.Add("num7", typeof(string));
            dt_save.Columns.Add("num", typeof(string));
            dt_save.Columns.Add("cf", typeof(string));
            dt_save.Columns.Add("numsum", typeof(string));
            dt_save.Columns.Add("js", typeof(string));

            for (int i = wz[0]; i < wz[1]; i++)
            {
                int[] iirows = new int[7];
                if (fxstop == true) break;
                iirows[0] = int.Parse(dtsource.Rows[i]["num1"].ToString());
                iirows[1] = int.Parse(dtsource.Rows[i]["num2"].ToString());
                iirows[2] = int.Parse(dtsource.Rows[i]["num3"].ToString());
                iirows[3] = int.Parse(dtsource.Rows[i]["num4"].ToString());
                iirows[4] = int.Parse(dtsource.Rows[i]["num5"].ToString());
                iirows[5] = int.Parse(dtsource.Rows[i]["num6"].ToString());
                iirows[6] = int.Parse(dtsource.Rows[i]["num7"].ToString());
                //号码规则比较
                iirows = hmgzfx(iirows, new int[] { 4, 3, 2, 1 });

                if (iirows != null)
                {
                    lock (dt_save)
                    {
                        DataRow dr = dt_save.NewRow();
                        dr["num1"] = iirows[0];
                        dr["num2"] = iirows[1];
                        dr["num3"] = iirows[2];
                        dr["num4"] = iirows[3];
                        dr["num5"] = iirows[4];
                        dr["num6"] = iirows[5];
                        dr["num7"] = iirows[6];
                        dr["num"] = string.Format("{0:00}", iirows[0]) + "," + string.Format("{0:00}", iirows[1]) + "," +
                                    string.Format("{0:00}", iirows[2]) + "," + string.Format("{0:00}", iirows[3]) + "," +
                                    string.Format("{0:00}", iirows[4]) + "," + string.Format("{0:00}", iirows[5]) + "+" +
                                    string.Format("{0:00}", iirows[6]);
                        //dr["cf"] = ds.Tables["cppbase"].Rows[i]["cf"].ToString();
                        dt_save.Rows.Add(dr);
                    }
                }
            }
            return dt_save;
        }

        public void SetListboxTxt(string txt)
        {
            listBox2.Items.Add(txt);
            listBox2.TopIndex = listBox2.Items.Count - (int)(listBox2.Height / listBox2.ItemHeight);
        }

        public DataTable doworkfx(int[] cf)
        {
            DataTable dt_save = new DataTable();

            dt_save.Columns.Add("num1", typeof(string));
            dt_save.Columns.Add("num2", typeof(string));
            dt_save.Columns.Add("num3", typeof(string));
            dt_save.Columns.Add("num4", typeof(string));
            dt_save.Columns.Add("num5", typeof(string));
            dt_save.Columns.Add("num6", typeof(string));
            dt_save.Columns.Add("num7", typeof(string));
            dt_save.Columns.Add("num", typeof(string));
            dt_save.Columns.Add("cf", typeof(string));
            dt_save.Columns.Add("numsum", typeof(string));
            dt_save.Columns.Add("js", typeof(string));
            dt_save.Columns.Add("id", typeof(int));


            //int maxcf = 40;
            //int mincf = 1;
            label48.Text = "当前无数据.";
            int ljcount = 0;



            for (int io = cf[0]; io <= cf[1]; io++)
            {

                DataSet ds = new DataSet();
                if (ds != null) ds.Reset();

                Application.DoEvents();
                //取数据库到datatable
                //string sql = "select num1,num2,num3,num4,num5,num6 from cpp_base where cf = "+cf.ToString()+" and js>70";
                string sql = "select * from cpp_base where cf=" + io.ToString() + " order by id asc ";// (num1 =2 and num2=15 and num3=22 and num4=26 and num5=30 and num6=33)"; // cf = " + cf.ToString() 
                //string sql = "select * from cpp_6hm";                                                                                     //string sql = "select * from cpp_6hm ";
                                                                                                      //Conn.Open();
                                                                                                      //ConnValue = Conn;
                                                                                                      // string sql = "select * from cpp_6hm";
                OleDbDataAdapter da = new OleDbDataAdapter(sql, ConnValue);
                da.Fill(ds, "cppbase");
                //ConnClose();

                //if (fxstop == true) break;

                ljcount = ds.Tables["cppbase"].Rows.Count;

                    //ds.Tables["cppbase"].DefaultView.Sort="id asc";

                    SetListboxTxt("读取重复率在[" + io.ToString() + "]的数据，共计[" + ljcount.ToString() + "]条.");
                //}));
                int iicl = ljcount;
                int iicount = 0;
                int iiclTMP = iicl / 5;
                int[][] vsFW = null;
                if (iicl > 1000)
                {
                    vsFW = new int[][]
                    {
                     new int[2]{0, iiclTMP},
                     new int[2]{iiclTMP+1,iiclTMP * 2},
                     new int[2]{iiclTMP* 2+1, iiclTMP *3},
                     new int[2]{iiclTMP*3 +1, iiclTMP *4 },
                     new int[2]{iiclTMP*4+1, iicl }
                    };
                } else
                {
                    vsFW = new int[][]
                    {
                        new int[2]{0,iicl},
                        new int[2]{0,0},
                        new int[2]{0,0},
                        new int[2]{0,0},
                        new int[2]{0,0}
                    };
                }
                
                Parallel.For(0, 5, i =>
               {

                   for (int ii = vsFW[i][0]; ii < vsFW[i][1]; ii++)
                   {

                       Application.DoEvents();
                       //this.Invoke(new Action(() =>
                       //        label49.Text = "正在执行重复机率[" + io.ToString() + "][" + ljcount + "]条数据.[" + ljCurrentRecno + "]"
                       //));
                       //lb49.Text = "正在处理第[" + ljCurrentRecno + "]条记录."; //"正在执行重复机率[" + io.ToString() + "]";//[" + ljcount + "]条数据.[" + ljCurrentRecno + "]";
                       //setText("正在执行重复机率[" + cf.ToString() + "][" + ljcount + "]条数据.[" + ljCurrentRecno + "]");
                       int[] iirows = new int[7];

                       if (fxstop == true) break;

                       iirows[0] = int.Parse(ds.Tables["cppbase"].Rows[ii]["num1"].ToString());
                       iirows[1] = int.Parse(ds.Tables["cppbase"].Rows[ii]["num2"].ToString());
                       iirows[2] = int.Parse(ds.Tables["cppbase"].Rows[ii]["num3"].ToString());
                       iirows[3] = int.Parse(ds.Tables["cppbase"].Rows[ii]["num4"].ToString());
                       iirows[4] = int.Parse(ds.Tables["cppbase"].Rows[ii]["num5"].ToString());
                       iirows[5] = int.Parse(ds.Tables["cppbase"].Rows[ii]["num6"].ToString());
                       iirows[6] = int.Parse(ds.Tables["cppbase"].Rows[ii]["num7"].ToString());
                       //iirows[6] = 10;

                       //号码规则比较
                       iirows = hmgzfx(iirows, new int[] { 3, 3, 3, 1 });
                       if (iirows != null)
                       {
                           lock (dt_save)
                           {
                               DataRow dr = dt_save.NewRow();
                               dr["num1"] = iirows[0];
                               dr["num2"] = iirows[1];
                               dr["num3"] = iirows[2];
                               dr["num4"] = iirows[3];
                               dr["num5"] = iirows[4];
                               dr["num6"] = iirows[5];
                               dr["num7"] = iirows[6];
                               dr["num"] = string.Format("{0:00}", iirows[0]) + "," + string.Format("{0:00}", iirows[1]) + "," +
                                           string.Format("{0:00}", iirows[2]) + "," + string.Format("{0:00}", iirows[3]) + "," +
                                           string.Format("{0:00}", iirows[4]) + "," + string.Format("{0:00}", iirows[5]) + "+" +
                                           string.Format("{0:00}", iirows[6]);
                               dr["cf"] = ds.Tables["cppbase"].Rows[ii]["cf"].ToString();
                               dr["id"] = ds.Tables["cppbase"].Rows[ii]["id"];
                               //dt_save1.Rows.Add(dr);
                               dt_save.Rows.Add(dr);
                               iicount++;
                           }
                       }
                   }

                   //SetListboxTxt("【完成】[" + io.ToString() + "]规则判断,[" + dt_save1.Rows.Count.ToString() + "]条数据满足.");
                   //foreach (DataRow dr in dt_save1.Rows)
                   //{
                   //    Application.DoEvents();
                   //    lock (dt_save)
                   //    {
                   //        dt_save.Rows.Add(dr.ItemArray);
                   //    }
                   //}
               });
                SetListboxTxt("正在【完成】重复率[" + io.ToString() + "]规则判断,最终有[" + iicount.ToString() + "]条数据满足.");
            }

            return dt_save;
        }

        /// <summary>
        /// 号码相似度规则一
        /// 把号码从后一个减前一个，取相差值，做成规则表
        /// 然后把系统的号码和规则表中的值相匹配
        /// 满足条件的留下，没有满足的取消
        /// </summary>
        public void hmxsd_gz1()
        {
            int[][] xx11 = new int[hm10.GetLength(0)][];
            DataTable dt_save = new DataTable();
            dt_save.Columns.Add("num1",typeof(string));
            dt_save.Columns.Add("num2", typeof(string));
            dt_save.Columns.Add("num3", typeof(string));
            dt_save.Columns.Add("num4", typeof(string));
            dt_save.Columns.Add("num5", typeof(string));
            dt_save.Columns.Add("num", typeof(string));
            dt_save.Columns.Add("sum", typeof(string));
            for (int i = 0; i < hm10.GetLength(0); i++)
            {
                int gz1, gz2, gz3, gz4, gz5;
                gz1 = hm10[i, 1] - hm10[i, 0];
                gz2 = hm10[i, 2] - hm10[i, 1];
                gz3 = hm10[i, 3] - hm10[i, 2];
                gz4 = hm10[i, 4] - hm10[i, 3];
                gz5 = hm10[i, 5] - hm10[i, 4];
                xx11[i] = new int[5]
                {
                    gz1,gz2,gz3,gz4,gz5
                };
                DataRow dr = dt_save.NewRow();
                dr["num1"] = gz1.ToString();
                dr["num2"] = gz2.ToString();
                dr["num3"] = gz3.ToString();
                dr["num4"] = gz4.ToString();
                dr["num5"] = gz5.ToString();
                dr["num"] = hm10[i, 0].ToString() + "-" + hm10[i, 1].ToString() + "-" +
                            hm10[i, 2].ToString() + "-" + hm10[i, 3].ToString() + "-" +
                            hm10[i, 4].ToString() + "-" + hm10[i, 5].ToString() + "+" +
                            hm10[i, 6].ToString();
                dr["sum"] = (gz1 + gz2 + gz3 + gz4 + gz5).ToString();
                dt_save.Rows.Add(dr);
            }
            hmxsd = xx11;
            WriteTextFile(dt_save, @"c:\\hmxsd.txt", false);
        }


        public class NumberSimilarityComparer
        {
            /// <summary>
            /// 获取两个字符串的相似度
            /// </summary>
            /// <param name=”sourceString”>第一个字符串</param>
            /// <param name=”str”>第二个字符串</param>
            /// <returns></returns>
            public static decimal GetSimilarityWith(int[] sourceString, int[] str)
            {

                decimal Kq = 2;
                decimal Kr = 1;
                decimal Ks = 1;

                //char[] ss = sourceString.ToCharArray();
                //char[] st = str.ToCharArray();

                //获取交集数量
                int q = sourceString.Intersect(str).Count();
                int s = sourceString.Length - q;
                int r = str.Length - q;

                return Kq * q / (Kq * q + Kr * r + Ks * s);
            }

            public static double CalculateSimilarity(int[] set1, int[] set2)
            {
                // 计算两个集合的平均值
                double avg1 = set1.Average();
                double avg2 = set2.Average();

                // 计算标准差
                double stdDev1 = set1.Select(x => x - avg1).Sum(x => x * x) / set1.Length;
                double stdDev2 = set2.Select(x => x - avg2).Sum(x => x * x) / set2.Length;

                // 标准差越小，相似度越高
                double xx=  1 - ((stdDev1 + stdDev2) / (2 * set1.Length * set2.Length));
                return xx;
            }
        }

        /// <summary>
        /// 号码相似度规则一
        /// 号码验证程序
        /// </summary>
        /// <param name="hm">即将传入的号码</param>
        /// <param name="grouphm">规则表</param>
        /// <param name="findCount">匹配度，最高5</param>
        /// <param name="maxnum">传入号码取多少位</param>
        /// <returns></returns>
        public Boolean hmxsdArray(int[] hm, int[][] grouphm, int findCount,int sumfindCount, int maxnum)
        {
            int Count = 0;
            int sumCount = 0;
            int[] numtmp = new int[maxnum];
            for (int i = 0; i < maxnum; i++)
            {
                numtmp[i] = hm[i+1] - hm[i];
            }
            for (int cc = 0; cc < grouphm.GetLength(0); cc++)//可以理解为：第一维的长度（即行数），结果为2
            {

                for (int nn = 0; nn < 5; nn++)//可以理解为：第二维的长度（即列数），结果为5
                {
                    if (grouphm[cc][nn] == numtmp[nn]) Count++;
                }
                if (Count == findCount) { sumCount++; }
                else { Count = 0; }

                //if (Fzpcf(numtmp, grouphm[cc], findCount) == false) sumCount = sumfindCount;
            }
            if (sumCount >= sumfindCount)
            {
                return true;
            }
            else { return false; }
        }

        private void button10_Click(object sender, EventArgs e)
        {
            DataTable dt_bb = new DataTable();
            DataTable dt_save = new DataTable();
            DataTable dt_save1 = new DataTable(); //被取消的信息
            DataSet ds = new DataSet();
            dt_save.Columns.Add("num1", typeof(string));
            dt_save.Columns.Add("num2", typeof(string));
            dt_save.Columns.Add("num3", typeof(string));
            dt_save.Columns.Add("num4", typeof(string));
            dt_save.Columns.Add("num5", typeof(string));
            dt_save.Columns.Add("num6", typeof(string));
            dt_save.Columns.Add("num7", typeof(string));
            dt_save.Columns.Add("num", typeof(string));
            dt_save.Columns.Add("cf", typeof(string));
            dt_save.Columns.Add("numsum", typeof(string));
            dt_save.Columns.Add("js", typeof(string));
            dt_save.Columns.Add("id", typeof(int));

            dt_save1.Columns.Add("num1", typeof(string));
            dt_save1.Columns.Add("num2", typeof(string));
            dt_save1.Columns.Add("num3", typeof(string));
            dt_save1.Columns.Add("num4", typeof(string));
            dt_save1.Columns.Add("num5", typeof(string));
            dt_save1.Columns.Add("num6", typeof(string));
            dt_save1.Columns.Add("num7", typeof(string));
            dt_save1.Columns.Add("num", typeof(string));
            dt_save1.Columns.Add("cf", typeof(string));
            dt_save1.Columns.Add("numsum", typeof(string));
            dt_save1.Columns.Add("js", typeof(string));
            dt_save1.Columns.Add("id", typeof(int));


            int maxcf = 40;
            int mincf = 1;
            label48.Text = "当前无数据.";
            int ljcount = 0;
            int ljCurrentRecno = 0;

            listBox1.Items.Add("开始分析：[" + DateTime.Now.ToString() + "].");

            int[][] xx = new int[][]
            {
                new int[2]{13,14},
                new int[2]{15,16},
                new int[2]{17,18},
                new int[2]{19,20},
                new int[2]{21,24},
                new int[2]{25,28},
                new int[2]{29,30 },
                new int[2]{31,38 },
                new int[2]{39,46 },
                new int[2]{1,12},


                //new int[2]{106,107}
                //new int[2]{30,50},
                //new int[2]{33,70},
                //new int[2]{71,75},
                //new int[2]{76,78},
                //new int[2]{79,82},
                //new int[2]{83,85},
                //new int[2]{88,88},
                //new int[2]{90,92},
                //new int[2]{93,95},
                //new int[2]{96,98},
                //new int[2]{99,105},
                //new int[2]{106,110},
                //new int[2]{111,160}
            };

            //一共执行5次相同的操作，然后把5次的操作取出来相同的取消，只留唯一的
            for (int cc = 0; cc < 1; cc++)
            {
                label49.Text = "正在执行第[" + cc.ToString() + "]/[5]轮操作.";

                //Task.Run(() =>
                //{
                //ParallelOptions parallelOptions = new ParallelOptions();
                //parallelOptions.MaxDegreeOfParallelism = 12;//设置线程数量
                Parallel.For(0, xx.Length, i =>
                {
                    //object ob_Label;
                    //ob_Label = this.GetType().GetField("label49", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).GetValue(this);

                    SetListboxTxt("正在执行[" + i.ToString() + "重复率的数据.");
                    Application.DoEvents();
                    DataTable ds_savexx = doworkfx(xx[i]);
                    //doworkfx(i)
                    //object ob_Label;
                    //ob_Label = this.GetType().GetField("progressBarX" + (i + 1).ToString(), System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).GetValue(this);
                    //doWork(1, zc / 3, (DevComponents.DotNetBar.Controls.ProgressBarX)ob_Label);
                    //WriteTextFile(ds_savexx.DefaultView.ToTable(true, "num"), @"c:\\cp.txt", true);
                    SetListboxTxt("结束[" + i.ToString() + "重复率的分析." + ds_savexx.Rows.Count.ToString());
                    lock (dt_save)
                    {
                        foreach (DataRow dr in ds_savexx.Rows)
                        {
                            //WriteTextFile(ds_savexx.DefaultView.ToTable(true, "num"), @"c:\\cp.txt", true);
                            //dt_save = ds_savexx.Copy();
                            dt_save.Rows.Add(dr.ItemArray);
                        }
                    }
                });



                for (int i = 0; i < dt_save.Rows.Count; i++)
                {
                    Application.DoEvents();
                    int[] iirow = new int[7];
                    iirow[0] = int.Parse(dt_save.Rows[i]["num1"].ToString());
                    iirow[1] = int.Parse(dt_save.Rows[i]["num2"].ToString());
                    iirow[2] = int.Parse(dt_save.Rows[i]["num3"].ToString());
                    iirow[3] = int.Parse(dt_save.Rows[i]["num4"].ToString());
                    iirow[4] = int.Parse(dt_save.Rows[i]["num5"].ToString());
                    iirow[5] = int.Parse(dt_save.Rows[i]["num6"].ToString());
                    iirow[6] = int.Parse(dt_save.Rows[i]["num7"].ToString());
                    if (FzpcfArray(iirow, hm10, 7) == false)
                    {
                        listBox3.Items.Add(string.Join(",", iirow) + "号码已开奖.");
                        dt_save.Rows[i].Delete();
                    }
                }
                dt_save.AcceptChanges();

               // WriteTextFile(dt_save.DefaultView.ToTable(true, new string[] { "num" }), @"c:\\cp_one_xsdsx.txt", true);

                //lock (dt_save)
                //{
                //    WriteTextFile(dt_save.DefaultView.ToTable(true, "num"), @"c:\\cp.txt", true);
                //}

                //2024-11-5
                //对已保存的数据进行相似度筛选
                SetListboxTxt("正在进行[" + dt_save.Rows.Count.ToString() + "]相似度筛选.");
                dt_save.DefaultView.Sort = "id asc";

                dt_save1 = dt_save.Copy();



                progressBarX1.Minimum = 1;
                progressBarX1.Maximum = dt_save.Rows.Count;

                List<int> mydelid = new List<int>();

                //for (int i = 0; i < dt_save.Rows.Count; i++)
                //{
                //    Application.DoEvents();
                //    progressBarX1.Value = i;
                //    progressBarX1.Text = i.ToString() + "/ " + progressBarX1.Maximum.ToString();
                //    //if (dt_save.Rows[i].RowState == DataRowState.Deleted) continue;
                //    int[] iirow = new int[6];
                //    int[] iirow1 = new int[6];
                //    for (int c = 0; c < 6; c++) iirow[c] = int.Parse(dt_save.Rows[i][c].ToString());

                //    for (int ii = i+1; ii < dt_save1.Rows.Count; ii++)
                //    {
                //        Application.DoEvents();
                //        //if (ii == i) continue;
                //        if (dt_save1.Rows[ii].RowState == DataRowState.Deleted) continue;
                //        for (int c = 0; c < 6; c++) iirow1[c] = int.Parse(dt_save1.Rows[ii][c].ToString());

                //        //if (NumberSimilarityComparer.GetSimilarityWith(iirow,iirow1) * 100 >= 60)
                //        if (iirow.Intersect(iirow1).Count() >= 5) //两个数组间有四个相同则删除
                //        {
                //            dt_save1.Rows[ii].Delete();
                //        }
                //        //if (Fzpcf(iirow, iirow1, 5, 6) == false)
                //        //{
                //        //    dt_save1.Rows[ii].Delete();
                //        //}
                //    }
                    
                //}
                dt_save1.AcceptChanges();
                dt_save = dt_save1;

                dt_save.DefaultView.Sort = "id asc";
                dataGridView5.DataSource = dt_save;
                SetListboxTxt("结束，共计[" + dt_save.Rows.Count.ToString() + "]条数据.");
                WriteTextFile(dt_save.DefaultView.ToTable(true, new string[] { "num","cf" }), @"c:\\cp_xsdsx.txt", true);

                DataRow[] drTemp = dt_save.Select();
                var listTmp = drTemp.Select(x => x.Field<string>("num")).ToArray();

                object[,] num = datatabletoarry(dt_save);

                int[][] xx11 = new int[num.GetLength(0)][];
                for (int i = 0; i < num.GetLength(0); i++)
                {
                    xx11[i] = new int[num.GetLength(1)];
                    for (int ccn = 0; ccn < num.GetLength(1); ccn++)
                    {
                        xx11[i][ccn] = int.Parse(num[i, ccn].ToString());
                    }
                }

                int[] build = new int[num.GetLength(0) * 6];
                int buildint = 0;
                for (int co = 0; co < xx11.GetLength(0); co++)
                {
                    for (int co1 = 0; co1 < 6; co1++)
                    {
                        build[buildint] = xx11[co][co1];
                        buildint++;
                    }
                }
                // 集合 dic 用于存放统计结果
                Dictionary<int, ItemInfo> dic =
                    new Dictionary<int, ItemInfo>();
                Dictionary<int, ItemInfo> dic1 =
                   new Dictionary<int, ItemInfo>();
                // 开始统计每个元素重复次数
                foreach (int v in build)
                {
                    if (dic.ContainsKey(v))
                    {
                        // 数组元素再次，出现次数增加 1
                        dic[v].RepeatNum += 1;
                    }
                    else
                    {
                        // 数组元素首次出现，向集合中添加一个新项
                        // 注意 ItemInfo类构造函数中，已经将重复
                        // 次数设置为 1
                        dic.Add(v, new ItemInfo(v));
                    }
                }
                var tt = dic.OrderByDescending(r => r.Value.RepeatNum);

                DataTable dt = new DataTable();
                dt.Columns.Add("num");
                dt.Columns.Add("cs");
                for (int i = 1; i < tt.Count(); i++)
                {
                    KeyValuePair<int, ItemInfo> kv = tt.ElementAt(i);
                    DataRow dr = dt.NewRow();
                    dr["num"] = kv.Key;
                    dr["cs"] = kv.Value.RepeatNum;
                    dt.Rows.Add(dr);
                }
                WriteTextFile(dt, @"c:\\cs.txt", false);


            }
            //最终检验
            //SetListboxTxt("正在进行最终检验[" + dt_save.Rows.Count.ToString() + "]相似度筛选.");
            //dt_save.DefaultView.Sort = "id asc";
            //int iiCount = dt_save.Rows.Count;
               // DataRow[] drTemp = dt_save.Select();
               // var listTmp = drTemp.Select(x => x.Field<string>("num")).ToArray();

               // object[,] num = datatabletoarry(dt_save);

               // int[][] xx11 = new int[num.GetLength(0)][];
               // for (int i = 0; i < num.GetLength(0); i++)
               // {
               //     xx11[i] = new int[num.GetLength(1)];
               //     for (int cc1 = 0; cc1 < num.GetLength(1); cc1++)
               //     {
               //         xx11[i][cc1] = int.Parse(num[i, cc1].ToString());
               //     }
               // }
               // decimal[] build = new decimal[num.GetLength(0) * 6];
               // int buildint = 0;
               // for (int co = 0; co < xx11.GetLength(0); co++)
               // {
               //     for (int co1 = 0; co1 < 6; co1++)
               //     {
               //         build[buildint] = xx11[co][co1];
               //         buildint++;
               //     }

               // }
               // // 集合 dic 用于存放统计结果
               // Dictionary<int, ItemInfo> dic =
               //     new Dictionary<int, ItemInfo>();
               // Dictionary<int, ItemInfo> dic1 =
               //    new Dictionary<int, ItemInfo>();
               // // 开始统计每个元素重复次数
               // foreach (int v in build)
               // {
               //     if (dic.ContainsKey(v))
               //     {
               //         // 数组元素再次，出现次数增加 1
               //         dic[v].RepeatNum += 1;
               //     }
               //     else
               //     {
               //         // 数组元素首次出现，向集合中添加一个新项
               //         // 注意 ItemInfo类构造函数中，已经将重复
               //         // 次数设置为 1
               //         dic.Add(v, new ItemInfo(v));
               //     }
               // }
               // var tt = dic.OrderByDescending(r => r.Value.RepeatNum);

               // List<int> TmpZbh = new List<int>();

               // for (int i = 0; i < tt.Count(); i++)
               // {
               //     KeyValuePair<int, ItemInfo> kv = tt.ElementAt(i);

               //     //**** 转换每个号码的出现百分率 ****
               //     decimal n1 = kv.Value.RepeatNum;
               //     decimal n2 = (xx11.GetLength(0) * 7);

               //     decimal bfltmp = n1 / n2;
               //     //string sql = "update cpp_bfl set bfl=" + bfltmp.ToString() +
               //     //             " where num=" + kv.Key.ToString();
               //     //OleDbCommand mysql = new OleDbCommand(sql, ConnValue);
               //     //mysql.ExecuteNonQuery();

               //     bfltable[i][0] = kv.Key;
               //     bfltable[i][1] = bfltmp;
               //     //**********************************
               // }

               // //OleDbCommand mydel = new OleDbCommand("delete from cpp_lskjhm", ConnValue);
               // //mydel.ExecuteNonQuery();

               // decimal sumbfl = 0.0000M;
               // for (int i = 0; i < xx11.GetLength(0); i++)
               // {
               //     decimal bfl = 0.0000M;
               //     for (int c = 0; c < bfltable.GetLength(0); c++)
               //     {
               //         if (xx11[i][0] == bfltable[c][0]) bfl += bfltable[c][1];
               //         if (xx11[i][1] == bfltable[c][0]) bfl += bfltable[c][1];
               //         if (xx11[i][2] == bfltable[c][0]) bfl += bfltable[c][1];
               //         if (xx11[i][3] == bfltable[c][0]) bfl += bfltable[c][1];
               //         if (xx11[i][4] == bfltable[c][0]) bfl += bfltable[c][1];
               //         if (xx11[i][5] == bfltable[c][0]) bfl += bfltable[c][1];
               //     }
               //     sumbfl += bfl;
               //     //xx11[i][7] = bfl;
               //     //decimal bfl = 0.0000M;
               //     //int[] hmlist = { xx11[i][0], xx11[i][1], xx11[i][2], xx11[i][3], xx11[i][4], xx11[i][5], xx11[i][6] };
               //     //string sql = string.Format("select sum(bfl) from cpp_bfl where num in ({0},{1},{2},{3},{4},{5},{6})",
               //     //                hmlist[0], hmlist[1], hmlist[2], hmlist[3], hmlist[4], hmlist[5], hmlist[6]);


               //     //OleDbCommand mysql = new OleDbCommand(sql, ConnValue);
               //     //bfl = (decimal)mysql.ExecuteScalar();

               //     //string sql1 = string.Format("insert into cpp_lskjhm values ({0},{1},{2},{3},{4},{5},{6},{7})",
               //     //                            hmlist[0], hmlist[1], hmlist[2], hmlist[3], hmlist[4], hmlist[5], hmlist[6], bfl);

               //     //OleDbCommand mysql1 = new OleDbCommand(sql1, ConnValue);
               //     //mysql1.ExecuteScalar();
               // }

               // //OleDbCommand myAvg = new OleDbCommand("select avg(bfl) from cpp_lskjhm", ConnValue);
               // //$"{((xxsum[0] / sum) * 100):F2}%";
               // label50.Text = $"{(sumbfl / xx11.GetLength(0)):F2}";// myAvg.ExecuteScalar().ToString();

               // for (int i = 0; i < tt.Count(); i++)
               // {
               //     KeyValuePair<int, ItemInfo> kv = tt.ElementAt(i);

               //     TmpZbh.Add(kv.Key);

               //     //i = i + 2;
               //     //if (i%2== 0) i=i+3;
               // }


               // //build =  build.Distinct().ToArray();
               // int[] build1 = TmpZbh.ToArray();
               // //Array.Sort(build1);
               // zbh = new int[33];
               // Array.Copy(build1, zbh, 33);
               // //Array.Copy(build1, 10, zbh, 0, 10);
               // listBox1.Items.Add(string.Join(",", build1));
               // listBox1.Items.Add("最大连续次数:" + ContinueNumLenth(zbh));

               // int iicl = dt_save.Rows.Count;
               // int iiclTMP = iicl / 5;
               // int[][] vsFW = new int[][]
               // {
               //      new int[2]{0, iiclTMP},
               //      new int[2]{iiclTMP+1,iiclTMP * 2},
               //      new int[2]{iiclTMP* 2+1, iiclTMP *3},
               //      new int[2]{iiclTMP*3 +1, iiclTMP *4 },
               //      new int[2]{iiclTMP*4+1, iicl }
               // };
               // DataTable ds_savexxx = null;
                
               // Parallel.For(0, 5, i =>
               //{
               //    Application.DoEvents();
               //    ds_savexxx = doworkfx(dt_save, vsFW[i]);
               //    listBox2.Items.Add("最终[" + i.ToString() + "]筛选结果:" + ds_savexxx.Rows.Count.ToString());
               //    listBox2.TopIndex = listBox2.Items.Count - 1;

               //    foreach (DataRow dr in ds_savexxx.Rows)
               //    {
               //        dt_save1.Rows.Add(dr.ItemArray);
               //    }

               //});

                //2024-11-5
                //对已保存的数据进行相似度筛选
                //SetListboxTxt("正在进行[" + dt_save.Rows.Count.ToString() + "]相似度筛选.");
                //dt_save.DefaultView.Sort = "id asc";

                //dt_save1 = dt_save.Copy();

                //progressBarX1.Minimum = 1;
                //progressBarX1.Maximum = dt_save.Rows.Count;

                //List<int> mydelid = new List<int>();

                //for (int i = 0; i < dt_save.Rows.Count; i++)
                //{
                //    Application.DoEvents();
                //    progressBarX1.Value = i;
                //    progressBarX1.Text = i.ToString() + "/ " + progressBarX1.Maximum.ToString();
                //    //if (dt_save.Rows[i].RowState == DataRowState.Deleted) continue;
                //    int[] iirow = new int[6];
                //    int[] iirow1 = new int[6];
                //    for (int c = 0; c < 6; c++) iirow[c] = int.Parse(dt_save.Rows[i][c].ToString());

                //    for (int ii = i + 1; ii < dt_save1.Rows.Count; ii++)
                //    {
                //        if (Fzpcf(iirow, xx11[ii], 3, 6) == false)
                //        {
                //            zjhmgz(string.Join(",", iirow) + "+" + dt_save.Rows[i][6].ToString(), "相似度筛选删除");
                //            lock (dt_save1) dt_save1.Rows[ii].Delete();
                //        }
                //    }

                //    //for (int ii = i + 1; ii < dt_save1.Rows.Count; ii++)
                //    //{
                //    //    Application.DoEvents();
                //    //    for (int iii = 0; iii < 6; iii++)
                //    //    {
                //    //        //iirow[iii] = int.Parse(dt_save.Rows[i][iii].ToString());
                //    //        iirow1[iii] = int.Parse(dt_save1.Rows[ii][iii].ToString());
                //    //    }
                //    //    if (Fzpcf(iirow, iirow1, 5, 6) == false)
                //    //    {
                //    //        dt_save1.Rows[ii].Delete();
                //    //    }
                //    //}
                //    dt_save1.AcceptChanges();
                //}
                //dt_save = dt_save1;

                //dt_save.DefaultView.Sort = "id asc";
                //dataGridView5.DataSource = dt_save;
                //SetListboxTxt("相似度筛选结束,共计[" + dt_save.Rows.Count.ToString() + "]条数据.");
                //WriteTextFile(dt_save.DefaultView.ToTable(true, new string[] { "num"}), @"c:\\cp_xsdsx.txt", true);

                //listBox1.Items.Add("结束分析：[" + DateTime.Now.ToString() + "].");
                //fxstop = false;
                //});
           ////最终检验
            //SetListboxTxt("正在进行最终检验[" + dt_save.Rows.Count.ToString() + "]相似度筛选.");
            //dt_save.DefaultView.Sort = "id asc";
            //int iiCount = dt_save.Rows.Count;


            //for (int i = 0; i < iiCount; i++)
            //{
            //    if (dt_save.Rows[i].RowState == DataRowState.Deleted) continue;
            //    int[] iirow = new int[6];
            //    int[] iirow1 = new int[6];
            //    for (int c = 0; c < 6; c++) iirow[c] = int.Parse(dt_save.Rows[i][c].ToString());

            //    for (int ii = i + 1; ii < iiCount; ii++)
            //    {
            //        if (dt_save.Rows[ii].RowState == DataRowState.Deleted) continue; //减少后面比较时间
            //        for (int iii = 0; iii < 6; iii++)
            //        {
            //            //iirow[iii] = int.Parse(dt_save.Rows[i][iii].ToString());
            //            iirow1[iii] = int.Parse(dt_save.Rows[ii][iii].ToString());
            //        }
            //        if (Fzpcf(iirow, iirow1, 6, 6) == false) 
            //        { 
            //            zjhmgz(string.Join(",",iirow)+"+"+dt_save.Rows[i][6].ToString(), "相似度筛选删除"); 
            //            dt_save.Rows[ii].Delete(); 
            //        }
            //    }
            //}
            //dt_save.AcceptChanges();
            //dt_save.DefaultView.Sort = "id asc";
            //dataGridView5.DataSource = dt_save;
            //SetListboxTxt("相似度筛选结束,共计[" + dt_save.Rows.Count.ToString() + "]条数据.");
            //WriteTextFile(dt_save.DefaultView.ToTable(true, new string[] { "num", "cf", "id" }), @"c:\\cp_xsdsx_success.txt", true);



            //在已生成的号码里面重新按以下规则进行筛选
            //先进行号码出现率的分析
            // DataRow[] drTemp = dt_save.Select();
            // var listTmp = drTemp.Select(x => x.Field<string>("num")).ToArray();

            // object[,] num = datatabletoarry(dt_save);

            // decimal[][] xx11 = new decimal[num.GetLength(0)][];
            // for (int i = 0; i < num.GetLength(0); i++)
            // {
            //     xx11[i] = new decimal[num.GetLength(1)];
            //     for (int cc = 0; cc < num.GetLength(1); cc++)
            //     {
            //         xx11[i][cc] = decimal.Parse(num[i, cc].ToString());
            //     }
            // }



            // var tt = dic.OrderByDescending(r => r.Value.RepeatNum);

            // List<int> TmpZbh = new List<int>();

            // for (int i = 0; i < tt.Count(); i++)
            // {
            //     KeyValuePair<int, ItemInfo> kv = tt.ElementAt(i);

            //     //**** 转换每个号码的出现百分率 ****
            //     decimal n1 = kv.Value.RepeatNum;
            //     decimal n2 = (xx11.GetLength(0) * 7);

            //     decimal bfltmp = n1 / n2;
            //     //string sql = "update cpp_bfl set bfl=" + bfltmp.ToString() +
            //     //             " where num=" + kv.Key.ToString();
            //     //OleDbCommand mysql = new OleDbCommand(sql, ConnValue);
            //     //mysql.ExecuteNonQuery();

            //     bfltable[i][0] = kv.Key;
            //     bfltable[i][1] = bfltmp;
            //     //**********************************
            // }

            // //OleDbCommand mydel = new OleDbCommand("delete from cpp_lskjhm", ConnValue);
            // //mydel.ExecuteNonQuery();

            // decimal sumbfl = 0.0000M;
            // for (int i = 0; i < xx11.GetLength(0); i++)
            // {
            //     decimal bfl = 0.0000M;
            //     for (int c = 0; c <  bfltable.GetLength(0); c++)
            //     {
            //         if (xx11[i][0] == bfltable[c][0]) bfl += bfltable[c][1];
            //         if (xx11[i][1] == bfltable[c][0]) bfl += bfltable[c][1];
            //         if (xx11[i][2] == bfltable[c][0]) bfl += bfltable[c][1];
            //         if (xx11[i][3] == bfltable[c][0]) bfl += bfltable[c][1];
            //         if (xx11[i][4] == bfltable[c][0]) bfl += bfltable[c][1];
            //         if (xx11[i][5] == bfltable[c][0]) bfl += bfltable[c][1];
            //     }
            //     sumbfl += bfl;
            //     //xx11[i][7] = bfl;
            //     //decimal bfl = 0.0000M;
            //     //int[] hmlist = { xx11[i][0], xx11[i][1], xx11[i][2], xx11[i][3], xx11[i][4], xx11[i][5], xx11[i][6] };
            //     //string sql = string.Format("select sum(bfl) from cpp_bfl where num in ({0},{1},{2},{3},{4},{5},{6})",
            //     //                hmlist[0], hmlist[1], hmlist[2], hmlist[3], hmlist[4], hmlist[5], hmlist[6]);


            //     //OleDbCommand mysql = new OleDbCommand(sql, ConnValue);
            //     //bfl = (decimal)mysql.ExecuteScalar();

            //     //string sql1 = string.Format("insert into cpp_lskjhm values ({0},{1},{2},{3},{4},{5},{6},{7})",
            //     //                            hmlist[0], hmlist[1], hmlist[2], hmlist[3], hmlist[4], hmlist[5], hmlist[6], bfl);

            //     //OleDbCommand mysql1 = new OleDbCommand(sql1, ConnValue);
            //     //mysql1.ExecuteScalar();
            // }

            // //OleDbCommand myAvg = new OleDbCommand("select avg(bfl) from cpp_lskjhm", ConnValue);
            // //$"{((xxsum[0] / sum) * 100):F2}%";
            // label50.Text = $"{(sumbfl / xx11.GetLength(0)):F2}";// myAvg.ExecuteScalar().ToString();

            // for (int i = 0; i <= tt.Count(); i++)
            // {
            //     KeyValuePair<int, ItemInfo> kv = tt.ElementAt(i);

            //     TmpZbh.Add(kv.Key);

            //     //i = i + 2;
            //     //if (i%2== 0) i=i+3;
            // }


            // //build =  build.Distinct().ToArray();
            // int[] build1 = TmpZbh.ToArray();
            // //Array.Sort(build1);
            // zbh = new int[33];
            // Array.Copy(build1, zbh, 33);
            // //Array.Copy(build1, 10, zbh, 0, 10);
            // listBox1.Items.Add(string.Join(",", build1));
            // listBox1.Items.Add("最大连续次数:" + ContinueNumLenth(zbh));

            // int iicl = dt_save.Rows.Count;
            // int iiclTMP = iicl / 5; 
            // int[][] vsFW = new int[][]
            // {
            //     new int[2]{0, iiclTMP},
            //     new int[2]{iiclTMP+1,iiclTMP * 2},
            //     new int[2]{iiclTMP* 2+1, iiclTMP *3},
            //     new int[2]{iiclTMP*3 +1, iiclTMP *4 },
            //     new int[2]{iiclTMP*4+1, iicl }
            // };
            // DataTable ds_savexxx = null;
            // Parallel.For(0, 5, i =>
            //{
            //    Application.DoEvents();
            //    ds_savexxx = doworkfx(dt_save,vsFW[i]);
            //    listBox2.Items.Add("最终["+i.ToString()+"]筛选结果:" + ds_savexxx.Rows.Count.ToString());
            //    listBox2.TopIndex = listBox2.Items.Count - 1;

            //    foreach(DataRow dr in ds_savexxx.Rows)
            //    {
            //        dt_save1.Rows.Add(dr.ItemArray);
            //    }

            //});
            //WriteTextFile(dt_save1.DefaultView.ToTable(true, "num"), @"c:\\cpsxjg.txt", true);

            // DataTable ds_savexxx = doworkfx(dt_save);



            #region 分析开始
            //for (int cf = mincf; cf <= maxcf ; cf++)
            //{
            //    ds.Clear();
            //    //取数据库到datatable
            //    //string sql = "select num1,num2,num3,num4,num5,num6 from cpp_base where cf = "+cf.ToString()+" and js>70";
            //    string sql = "select * from cpp_base where cf = " + cf.ToString();// (num1 =2 and num2=15 and num3=22 and num4=26 and num5=30 and num6=33)"; // cf = " + cf.ToString() 
            //    //string sql = "select * from cpp_6hm ";
            //    OleDbDataAdapter da = new OleDbDataAdapter(sql, ConnValue);
            //    da.Fill(ds, "cppbase");
            //    ConnClose();

            //    //if (fxstop == true) break;
            //    ljcount += ds.Tables["cppbase"].Rows.Count;



            //    for (int i = 0; i < ds.Tables["cppbase"].Rows.Count; i++)
            //    {
            //        ljCurrentRecno++;
            //        label49.Text = "正在执行重复机率[" + cf.ToString() + "][" +ljcount + "]条数据.[" + ljCurrentRecno + "]";
            //        int[] iirows = new int[7];
            //        Boolean ibTrue = false;
            //        string ibTrueInfo = "";

            //        if (fxstop == true) break;

            //        iirows[0] = int.Parse(ds.Tables["cppbase"].Rows[i]["num1"].ToString());
            //        iirows[1] = int.Parse(ds.Tables["cppbase"].Rows[i]["num2"].ToString());
            //        iirows[2] = int.Parse(ds.Tables["cppbase"].Rows[i]["num3"].ToString());
            //        iirows[3] = int.Parse(ds.Tables["cppbase"].Rows[i]["num4"].ToString());
            //        iirows[4] = int.Parse(ds.Tables["cppbase"].Rows[i]["num5"].ToString());
            //        iirows[5] = int.Parse(ds.Tables["cppbase"].Rows[i]["num6"].ToString());
            //        iirows[6] = int.Parse(ds.Tables["cppbase"].Rows[i]["num7"].ToString());
            //        //iirows[6] = int.Parse(dt_bb.Rows[i]["num7"].ToString());
            //        label47.Text = "[" + ds.Tables["cppbase"].Rows.Count.ToString() +
            //                       "]正在分析第[" + i.ToString() + "]— [" +
            //                      iirows[0].ToString() + "][" +
            //                      iirows[1].ToString() + "][" +
            //                      iirows[2].ToString() + "][" +
            //                      iirows[3].ToString() + "][" +
            //                      iirows[4].ToString() + "][" +
            //                      iirows[5].ToString() + "][" +
            //                      iirows[6].ToString() + "]";
            //        while (true)
            //        {
            //            Application.DoEvents();
            //            int cgcs = 0; //

            //            //八卦阵判断
            //            ibTrue = FzpcfArray(iirows, bgz, 3, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[八卦阵未通过]";

            //            //集团码,若随机的号码里面组合有5个与该下列号码相同，就排除。
            //            ibTrue = Fzpcf(iirows, jthm, 5, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[集团码未通过]";

            //            //万能码,如果你选择的号码里面没有以下号码其中之一，就排除。
            //            ibTrue = Fzpcf(iirows, wlm, 1, 6);
            //            if (ibTrue == false) cgcs++; else ibTrueInfo += "[万能码未通过]";

            //            //神7数字
            //            ibTrue = Fzpcf(iirows, s7sz, 1, 6);
            //            if (ibTrue == false) cgcs++; else ibTrueInfo += "[神7数字未通过]";

            //            //质数
            //            ibTrue = Fzpcf(iirows, zshm, 1, 6);
            //            if (ibTrue == false) cgcs++; else ibTrueInfo += "[质数未通过]";

            //            //2,3,6,7,9尾
            //            ibTrue = Fzpcf(iirows, w23679w, 1, 6);
            //            if (ibTrue == false) cgcs++; else ibTrueInfo += "[23679尾未通过]";

            //            //分组排除法
            //            // hm1
            //            ibTrue = FzpcfArray(iirows, hm1, 4, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm1未通过]";

            //            //hm2
            //            ibTrue = Fzpcf(iirows, hm2, 4, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm2未通过]";

            //            //hm3
            //            ibTrue = FzpcfArray(iirows, hm3, 3, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm3未通过]";

            //            //hm4
            //            ibTrue = FzpcfArray(iirows, hm4, 5, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm4未通过]";

            //            //hm5
            //            ibTrue = FzpcfArray(iirows, hm5, 5, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm5未通过]";

            //            //hm6
            //            ibTrue = Fzpcf(iirows, hm6, 5, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm6未通过]";

            //            //hm7
            //            ibTrue = FzpcfArray(iirows, hm7, 5, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm7未通过]";

            //            //hm8
            //            ibTrue = Fzpcf(iirows, hm8, 5, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm8未通过]";

            //            //hm9
            //            ibTrue = FzpcfArray(iirows, hm9, 5, 6);
            //            if (ibTrue == true) cgcs++; else ibTrueInfo += "[hm9未通过]";

            //            //在我选择的15号码里面去匹配
            //            //ibTrue = FzpcfArray(iirows, hm11, 6);
            //            //int[] tmp = { 1, 3, 4, 5, 7, 9, 11, 13, 14, 15, 17, 19, 22, 23, 25, 28, 30, 31, 32, 33 };
            //            //int[] tmp1 = { 2, 6, 8, 10, 12, 16, 18, 20, 21, 24, 26, 27, 29 };
            //            //int[] tmp2 = { 3,4,7,11,12,15,17,24,27,29,30,33 };  //12码
            //            //int[] tmp3 = { 1,3,4,8,12,13,17,18,24,25,28,32 };//12码
            //            int[] tmp3 = { 1, 2, 3, 5, 6, 7, 10, 12, 13, 14, 15, 17, 19, 20, 23, 24, 25, 27, 29, 30, 31, 32, 33 };
            //            ibTrue = Fzpcf(iirows, zbh, 3, 6);
            //            if (ibTrue == false) cgcs++; else ibTrueInfo += "[12码未通过]";

            //            //历史号码比对
            //            ibTrue = FzpcfArray(iirows, hm10, 4, 6);
            //            if (ibTrue == true) cgcs++;
            //            else
            //            {
            //                //listBox1.Items.Add(">>>>>>>> 历史中奖 >>>>>>>" + string.Join(",", iirows));
            //                ibTrueInfo += "[历史号码未通过]";
            //            }

            //            if (cgcs != 17) ibTrue = false;
            //            else
            //            {

            //                if (iirows[0] + iirows[1] + iirows[2] + iirows[3] + iirows[4] + iirows[5] > 130) ibTrue = false;

            //                //号码出现机率要达到平均值
            //                string sqlsum = string.Format("select sum(bfl) from cpp_bfl where num in ({0},{1},{2},{3},{4},{5},{6})",
            //                                            iirows[0], iirows[1], iirows[2], iirows[3], iirows[4], iirows[5], iirows[6]);
            //                Conn.Open();
            //                ConnValue = Conn;
            //                OleDbCommand mysum = new OleDbCommand(sqlsum, ConnValue);
            //                decimal decimal_mysumresult = (decimal)mysum.ExecuteScalar();
            //                ConnClose();
            //                decimal decimal_myavg = decimal.Parse(label50.Text.ToString());
            //                decimal OK_myMAX = decimal_myavg + (decimal)0.02;
            //                decimal OK_myMIN = decimal_myavg - (decimal)0.02;

            //                if (decimal_mysumresult > OK_myMIN && decimal_mysumresult < OK_myMAX) ibTrue = true;
            //                else
            //                {
            //                    ibTrue = false;
            //                    ibTrueInfo += decimal_mysumresult.ToString() + "出现机率未通过";

            //                }
            //            }
            //            //if (iirows[0] > 10) ibTrue = false;
            //            break;
            //        }
            //        //listBox1.Items.Add(string.Join(",", iirows) + ibTrueInfo);
            //        if (ibTrue == true)
            //        {

            //            //iirows[6] = 0;
            //            DataRow dr = dt_save.NewRow();
            //            dr["num1"] = iirows[0];
            //            dr["num2"] = iirows[1];
            //            dr["num3"] = iirows[2];
            //            dr["num4"] = iirows[3];
            //            dr["num5"] = iirows[4];
            //            dr["num6"] = iirows[5];
            //            dr["num7"] = iirows[6];
            //            dr["num"] = string.Format("{0:00}", iirows[0]) + "," + string.Format("{0:00}", iirows[1]) + "," +
            //                        string.Format("{0:00}", iirows[2]) + "," + string.Format("{0:00}", iirows[3]) + "," +
            //                        string.Format("{0:00}", iirows[4]) + "," + string.Format("{0:00}", iirows[5]) + "+" +
            //                        string.Format("{0:00}", iirows[6]);
            //            dr["cf"] = ds.Tables["cppbase"].Rows[i]["cf"].ToString();
            //            dt_save.Rows.Add(dr);
            //            label48.Text = "共计满足条件号码有[" + dt_save.Rows.Count.ToString() + "]条.";
            //            //listBox1.Items.Add(dr["num"]);
            //        }
            //        //else
            //        //{
            //        //    DataRow dr = dt_save1.NewRow();
            //        //    dr["num1"] = iirows[0];
            //        //    dr["num2"] = iirows[1];
            //        //    dr["num3"] = iirows[2];
            //        //    dr["num4"] = iirows[3];
            //        //    dr["num5"] = iirows[4];
            //        //    dr["num6"] = iirows[5];
            //        //    dr["num7"] = iirows[6];
            //        //    dr["num"] = string.Format("{0:00}", iirows[0]) + "," + string.Format("{0:00}", iirows[1]) + "," +
            //        //                string.Format("{0:00}", iirows[2]) + "," + string.Format("{0:00}", iirows[3]) + "," +
            //        //                string.Format("{0:00}", iirows[4]) + "," + string.Format("{0:00}", iirows[5]) + "+" +
            //        //                string.Format("{0:00}", iirows[6]);
            //        //    dr["cf"] = ds.Tables["cppbase"].Rows[i]["cf"].ToString();
            //        //    dr["qxinfo"] = ibTrueInfo;
            //        //    dt_save1.Rows.Add(dr);
            //        //}
            //    }
            //    dataGridView5.DataSource = dt_save;
            //    label48.Text = "共计满足条件号码有[" + dt_save.Rows.Count.ToString() + "]条.";
            //    WriteTextFile(dt_save, @"d:\CP.txt");
            //    //WriteTextFile(dt_save.DefaultView.ToTable(true,"num"), @"d:\CP.txt");
            //    //WriteTextFile(dt_save1, @"d:\CPqxinfo.txt");
            //}
            #endregion


        }


        /// <summary>
        /// DataTable 转二维数组
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public object[,] datatabletoarry(DataTable dt)
        {
            int col = 7;// dt.Columns.Count;
            object[,] array = new object[dt.Rows.Count, col];
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                for (int j = 0; j < 7; j++)
                {
                    array[i, j] = dt.Rows[i][j];
                }
            }
            return array;
        }
        

        private void button11_Click(object sender, EventArgs e)
        {
            fxstop = true;
        }


        

        private void button12_Click(object sender, EventArgs e)
        {
            int[] b = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,
                          19,20,21,22,23,24,25,26,27,28,29,30,31,32,33};
            int[] bo = randomList(b);
            listBox1.Items.Add(string.Join(",",bo));

            int[][] b1 = new int[3][];
            int[] iisplit = { 11, 22, 33 };
            int bb = 0;
            int nn = 0;
            for (int i = 0; i < 3; i++)
            {
                b1[i] = new int[11];
                for (int cc = bb;cc<iisplit[i];cc++)
                {

                    b1[i][nn] = bo[cc] ;
                    nn++;
                }
                nn = 0;
                bb = iisplit[i];
                int[] xx = b1[i];
                //label50.Text = string.Join(",", xx);
                for (int ii = 0; ii < 11; ii++)
                {
                    hm11[i,ii] = xx[ii];
                }
            }

            listBox1.Items.Add("第一组随机数:"+ string.Join(",", b1[0]));
            listBox1.Items.Add("第二组随机数:" + string.Join(",", b1[1]));
            listBox1.Items.Add("第三组随机数:" + string.Join(",", b1[2]));

            int[][] xx11 = new int[hm10.GetLength(0)][];
            for (int i = 0; i < hm10.GetLength(0); i++)
            {
                xx11[i] = new int[hm10.GetLength(1)];
                for (int cc=0;cc<hm10.GetLength(1);cc++)
                {
                    xx11[i][cc] = hm10[i, cc];
                }
            }
            //若不减-1 ： (hm10.GetLength(1) -1)，则为7个号
            int[] build = new int[hm10.GetLength(0)*(hm10.GetLength(1) -1)];
            int buildint = 0;
            for (int co = 0; co < xx11.GetLength(0); co++)
            {
                for (int co1 = 0; co1 < 6; co1++) //只取前6个号
                {
                    build[buildint] = xx11[co][co1];
                    buildint++;
                }
                
            }

            



            //号码相似度规则一
            hmxsd_gz1();

            // 集合 dic 用于存放统计结果
            Dictionary<int, ItemInfo> dic =
                new Dictionary<int, ItemInfo>();
            Dictionary<int, ItemInfo> dic1 =
               new Dictionary<int, ItemInfo>();
            // 开始统计每个元素重复次数
            foreach (int v in build)
            {
                if (dic.ContainsKey(v))
                {
                    // 数组元素再次，出现次数增加 1
                    dic[v].RepeatNum += 1;
                }
                else
                {
                    // 数组元素首次出现，向集合中添加一个新项
                    // 注意 ItemInfo类构造函数中，已经将重复
                    // 次数设置为 1
                    dic.Add(v, new ItemInfo(v));
                }
            }

            var tt  = dic.OrderByDescending(r => r.Value.RepeatNum);

            List<int> TmpZbh = new List<int>();

            for (int i = 0; i < tt.Count(); i++)
            {
                KeyValuePair<int, ItemInfo> kv = tt.ElementAt(i);

                //**** 转换每个号码的出现百分率 ****
                decimal n1 = kv.Value.RepeatNum;
                decimal n2 = (hm10.GetLength(0) * 6);

                decimal bfltmp = n1/n2;
                string sql = "update cpp_bfl set bfl=" + bfltmp.ToString() +
                             " where num=" + kv.Key.ToString();
                OleDbCommand mysql = new OleDbCommand(sql, ConnValue);
                mysql.ExecuteNonQuery();

                bfltable[i][0] = kv.Key;
                bfltable[i][1] = bfltmp;
               //**********************************
            }

            OleDbCommand mydel = new OleDbCommand("delete from cpp_lskjhm", ConnValue);
            mydel.ExecuteNonQuery();

            for (int i = 0; i < hm10.GetLength(0); i++)
            {

                decimal bfl=0.0000M;
                int[] hmlist = { hm10[i, 0], hm10[i, 1], hm10[i, 2], hm10[i, 3], hm10[i, 4], hm10[i, 5], hm10[i, 6] };
                string sql = string.Format("select sum(bfl) from cpp_bfl where num in ({0},{1},{2},{3},{4},{5},{6})",
                                hmlist[0], hmlist[1], hmlist[2], hmlist[3], hmlist[4], hmlist[5], hmlist[6]);


                OleDbCommand mysql = new OleDbCommand(sql, ConnValue);
                bfl = (decimal)mysql.ExecuteScalar();

                string sql1 = string.Format("insert into cpp_lskjhm values ({0},{1},{2},{3},{4},{5},{6},{7})",
                                            hmlist[0], hmlist[1], hmlist[2], hmlist[3], hmlist[4], hmlist[5], hmlist[6], bfl);

                OleDbCommand mysql1 = new OleDbCommand(sql1, ConnValue);
                mysql1.ExecuteScalar();
            }

            OleDbCommand myAvg = new OleDbCommand("select avg(bfl) from cpp_lskjhm", ConnValue);
            label50.Text = myAvg.ExecuteScalar().ToString();


            for (int i = 0; i < tt.Count(); i++)
            {
                KeyValuePair<int, ItemInfo> kv = tt.ElementAt(i);

                TmpZbh.Add(kv.Key);

                //i = i + 2;
                //if (i%2== 0) i=i+3;
            }


            //build =  build.Distinct().ToArray();
            int[] build1 = TmpZbh.ToArray();
            //Array.Sort(build1);
            zbh = new int[33];
            Array.Copy(build1, zbh, 33);
            //Array.Copy(build1, 10, zbh, 0, 10);
            listBox1.Items.Add(string.Join(",",build1));
            listBox1.Items.Add("最大连续次数:" + ContinueNumLenth(zbh));

        }

        /// <summary>
        /// 返回数组中连续数字出现次数
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        public static int QueueString(int[] str)
        {
            string input = string.Join(",", str);
            var arr = new System.Collections.ArrayList();
            var lines = input.Split(' ', ',', '，');
            int min, max, tmp = 1;
            max = min = int.Parse(lines[0]);
            foreach (var line in lines)
            {
                tmp = int.Parse(line);

                if ((tmp - max) > 1)
                {
                    
                    if (max != min) arr.Add(string.Format("{0}-{1}", min, max));
                    max = min = tmp;
                }
                else
                {
                    max = tmp;
                }
            }
            if ((tmp == min) || (tmp == max))
            {
                if (max != min)  arr.Add(string.Format("{0}-{1}", min, max));
            }
            return arr.Count;
        }

        public static int GetSequentialCount(int[] array)
        {
            if (array.Length == 0) return 0;
            Array.Sort(array);
            int count = 1;
            for (int i = 1; i < array.Length; i++)
            {
                if (array[i] == array[i - 1] + 1)
                {
                    count++;
                }
            }
            return count;
        }

        private void button13_Click(object sender, EventArgs e)
        {
            int[][] xx = 
            {
                new int[7]{1,2,3,4,5,6,7},
                new int[7]{8,9,10,11,12,13,14},
                new int[7]{15,16,17,18,19,20,21},
                new int[6]{22,23,24,25,26,27},
                new int[6]{28,29,30,31,32,33}
            };

            int[] xxsum = { 0, 0, 0, 0, 0 };
            for (int i = 0; i < hm10.GetLength(0); i++)
            {
                int[] hmlist = { hm10[i, 0], hm10[i, 1], hm10[i, 2], hm10[i, 3], hm10[i, 4], hm10[i, 5]};

                for (int c=0;c< hmlist.Length; c++)
                {
                    int? index = GetIndexOfElement(xx, hmlist[c]);

                    if (index != null)
                    {
                        xxsum[(int)index]++;
                    }

                }
            }
            double sum = xxsum.Sum();

            double sum1 = xxsum[0];

            numq1.Text = $"{((xxsum[0] / sum) * 100):F2}%";
            numq2.Text = $"{((xxsum[1] / sum) * 100):F2}%";
            numq3.Text = $"{((xxsum[2] / sum) * 100):F2}%";
            numq4.Text = $"{((xxsum[3] / sum) * 100):F2}%";
            numq5.Text = $"{((xxsum[4] / sum) * 100):F2}%";
        }


        public int? GetIndexOfElement(int[][] array, int element)
        {
            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array[i].Length; j++)
                {
                    if (array[i][j] == element)
                    {
                        return i;//* array[i].Length + j; // 计算索引
                    }
                }
            }
            return null; // 如果没有找到，返回null
        }

        public int? GetIndexOfElement(decimal[][] array, int element)
        {
            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array[i].Length; j++)
                {
                    if (array[i][j] == element)
                    {
                        return i;//* array[i].Length + j; // 计算索引
                    }
                }
            }
            return null; // 如果没有找到，返回null
        }

        /// <summary>
        /// 号码最大连续次数
        /// </summary>
        /// <param name="array"></param>
        /// <returns></returns>
        public static int ContinueNumLenth(int[] array)
        {
            int value = array[0], tempvalue = 0, maxvalue = 0;
            int count = 1, pos = 0;
            int len = 0;
            for (int i = 0; i < array.Length; i++)
            {
                len = len < array.Length ? pos + 1 : pos;
                if (++pos < array.Length && array[len] == value + 1)
                {
                    value = array[pos];
                    count++;
                    tempvalue = count;
                }
                else
                {
                    if (maxvalue < tempvalue)
                    {
                        maxvalue = tempvalue;
                    }
                    if (pos < array.Length)
                    {
                        value = array[pos];
                        count = 1;
                    }
                }
            }
            return maxvalue;
        }

        /// <summary>
        /// a/b取个位数
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public int GetOnesDigitOfDivision(int a, int b)
        {
            if (b == 0)
            {
                throw new DivideByZeroException("分母不能为0");
            }
            return (a / b) % 10;
        }

        public int GetOnesDigitOfDivision(int a, int b, bool x)
        {
            if (b == 0)
            {
                throw new DivideByZeroException("分母不能为0");
            }
            if (x == true) return ((a - b) / b) % 10;else  return (a / b) % 10;
        }

        /// <summary>
        /// a-b取个位数
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public int DivideAndGetOnesPlace(int a, int b)
        {
            int result = (a - b);
            return result >= 0 ? result % 10 : (result - 5) % 10 + 10; // 确保负数转换为正数的个位数
        }

        int[][] twsbase =
        {
            new int[]{10,20,30},
            new int[]{11,21,31},
            new int[]{12,22,32},
            new int[]{13,23,33},
            new int[]{14,24},
            new int[]{15,25},
            new int[]{16,26},
            new int[]{17,27},
            new int[]{18,28},
            new int[]{19,29},
        };
        int[] tsbase = { 5, 6, 7, 8, 9, 0, 1, 2, 3, 4 };
        int[] csbase = { 5, 4, 3, 2, 1, 0, 9, 8, 7, 6 };


        private void button14_Click(object sender, EventArgs e)
        {
            //取最后一期的双色球
            int hm1, hm2, hm3, hm4, hm5, hm6, hm7;
            int 合值;
            int 差值1, 差值2, 差值3, 差值4, 差值5, 差值6, 差值7;
            List<int> 同尾号集合 = new List<int>();
            hm1 = hm10[0, 0];
            hm2 = hm10[0, 1];
            hm3 = hm10[0, 2];
            hm4 = hm10[0, 3];
            hm5 = hm10[0, 4];
            hm6 = hm10[0, 5];
            hm7 = hm10[0, 6];
            合值 = hm1 + hm2 + hm3 + hm4 + hm5 + hm6 + hm7;
            //取6个号的差值
            差值1 = GetOnesDigitOfDivision(合值, hm1);
            差值2 = GetOnesDigitOfDivision(合值, hm2);
            差值3 = GetOnesDigitOfDivision(合值, hm3);
            差值4 = GetOnesDigitOfDivision(合值, hm4);
            差值5 = GetOnesDigitOfDivision(合值, hm5);
            差值6 = GetOnesDigitOfDivision(合值, hm6);
            //差值1 = GetOnesDigitOfDivision(合值, hm1,true);
            //差值2= GetOnesDigitOfDivision(合值, hm2, true);
            //差值3 = GetOnesDigitOfDivision(合值, hm3, true);
            //差值4 = GetOnesDigitOfDivision(合值, hm4, true);
            //差值5 = GetOnesDigitOfDivision(合值, hm5, true);
            //差值6 = GetOnesDigitOfDivision(合值, hm6, true);

            if (差值1!=0) 同尾号集合.Add(差值1);
            for (int i = 0; i < twsbase[差值1].Length; i++) 同尾号集合.Add(twsbase[差值1][i]);
            if (差值2 != 0) 同尾号集合.Add(差值2);
            for (int i = 0; i < twsbase[差值2].Length; i++) 同尾号集合.Add(twsbase[差值2][i]);
            if (差值3 != 0) 同尾号集合.Add(差值3);
            for (int i = 0; i < twsbase[差值3].Length; i++) 同尾号集合.Add(twsbase[差值3][i]);
            if (差值4 != 0) 同尾号集合.Add(差值4);
            for (int i = 0; i < twsbase[差值4].Length; i++) 同尾号集合.Add(twsbase[差值4][i]);
            if (差值5 != 0) 同尾号集合.Add(差值5);
            for (int i = 0; i < twsbase[差值5].Length; i++) 同尾号集合.Add(twsbase[差值5][i]);
            if (差值6 != 0) 同尾号集合.Add(差值6);
            for (int i = 0; i < twsbase[差值6].Length; i++) 同尾号集合.Add(twsbase[差值6][i]);

            同尾号集合 = 同尾号集合.Distinct().ToList().OrderBy(o=>o).ToList();
            listBox4.Items.Add("差值推荐红球："+(差值1 + 差值2 + 差值3 + 差值4 + 差值5 + 差值6).ToString());
            listBox4.Items.Add(string.Join(",", 同尾号集合));


            号码规则(30);


            zbh = 同尾号集合.ToArray();

            //for (int i = hm10.GetLength(0) -1; i > 0; i--)
            //{
            //    int hm1, hm2, hm3, hm4, hm5, hm6, hm7;
            //    int 差数1,差数2;    //差数
            //    int 同尾数1, 同尾数2,同尾数22,同尾数222; //同尾数
            //    string 补数1同尾数; //存在多个string.join(",",xx)方法
            //    int 邻数1, 邻数2;   //邻数
            //    int 替数1, 替数11, 替数2, 替数22;   //替数
            //    int 凑数1, 凑数2;//凑数
            //    int 补数1, 补数2;//补数
            //    int tws3;
            //    string hmDisplay = "";

            //    hm1 = hm10[i, 0];
            //    hm2 = hm10[i, 1];
            //    hm3 = hm10[i, 2];
            //    hm4 = hm10[i, 3];
            //    hm5 = hm10[i, 4];
            //    hm6 = hm10[i, 5];
            //    hm7 = hm10[i, 6];
            //    //第一步：第六位减去第一位，取值的个位数，第一行
            //    差数1 = DivideAndGetOnesPlace(hm6, hm1);
            //    //第二步：第六位减去第四位，取值的个位数，第二行
            //    差数2 = DivideAndGetOnesPlace(hm6, hm3);

            //    //第三步：取第一次差值的同尾数
            //    同尾数1 = twsbase[差数1].Length == 3 ? twsbase[差数1][2] : twsbase[差数1][1];
            //    //第四步：取第一次差值的邻数
            //    邻数1 = 差数1 + 1 > 9 ? 10 : 差数1 + 1;
            //    //第五步：取第二次差值的替数


            //    替数2 = tsbase[差数2];
            //    //第六步：取第二次替数的同尾数
            //    同尾数2 = twsbase[替数2].Length == 3 ? twsbase[替数2][0] : twsbase[替数2][1];
            //    //第七步：取第二次差值的邻数
            //    邻数2 = 差数2 + 1 > 9 ? 1 : 差数2 + 1;
            //    //第八步：取第二次邻数的同尾数
            //    同尾数22 = twsbase[邻数2].Length == 3 ? twsbase[邻数2][1] : twsbase[邻数2][0];
            //    //第九步：取第二次差值的凑数
            //    凑数2 = csbase[邻数2];
            //    //第十步：取第二次凑数的同尾数
            //    同尾数222 = twsbase[凑数2].Length == 3 ? twsbase[凑数2][1] : twsbase[凑数2][0];
            //    //第十一步：取第二次差值的补数
            //    补数2 = 10 - 差数2;




            //    ////第三步：取第一次的邻数
            //    //邻数1 = 差数1 - 1 <= 0 ? 0 : 差数1 - 1;
            //    ////第四步：取第一次的替数
            //    //替数1 = tsbase[差数1];
            //    ////第五步：取第一次的补数
            //    //补数1 = 10 - 差数1 == 10 ? 0 : 10 - 差数1;
            //    ////第六步：取多个同位数
            //    //补数1同尾数 = string.Join(",", twsbase[补数1]);
            //    ////第七步：取第二次差值的同尾数
            //    //同尾数2 = twsbase[差数2][twsbase[差数2].Length - 1];


            //    ////第三步：取第一次的凑数
            //    //凑数1 = csbase[差数1];
            //    ////第四步：取第一次的同尾数，最大的一个同尾数
            //    //同尾数1 = twsbase[差数1][twsbase[差数1].Length -1];

            //    ////第五步：第二行,取第二次的凑数
            //    //凑数2 = csbase[差数2];
            //    ////第六步：取第二次的同尾数，但取第一个，即10-19位同尾数
            //    //同尾数2 = twsbase[差数2][1];
            //    ////第七步：取第二次的补数
            //    //补数2 = 10 - 差数2;
            //    ////第八步：取第二次补数的同尾数，取第二个，即20-29位同尾数
            //    //同尾数22 = twsbase[差数2][2];

            //    ////同尾数1 = 差数1 < 3 ? 差数1 * 10 + 差数1 : 差数1 + 10;
            //    //邻数1 = 差数1 - 1 <= 0 ? 0 : 差数1 - 1;
            //    //替数1 = tsbase[邻数1];
            //    //替数11 = 替数1 + 10;

            //    //同尾数2 = 差数2 < 3 ? 差数2 * 10 + 差数2 : 差数2 + 10;
            //    //邻数2 = 差数2 - 1 <= 0 ? 0 : 差数2 - 1;
            //    //替数2 = tsbase[邻数2];
            //    //替数22 = 替数2 + 10;
            //    //凑数2 = csbase[替数2];
            //    //tws3 = 凑数2 < 3 ? 凑数2 * 10 + 凑数2 : 凑数2 + 10;
            //    //补数2 = 10 - 差数2;
            //    listBox4.Items.Add("当期号码:"+hm1 + "," + hm2 + "," + hm3 + "," + hm4 + "," + hm5 + "," + hm6 + "+" + hm7);
            //    listBox4.Items.Add("");
            //    //listBox4.Items.Add("推荐号码[" + 邻数1.ToString() + "," + 替数1.ToString() + "," + 补数1.ToString() + "," + 补数1同尾数.ToString() + "," + 同尾数2.ToString() + "]");
            //    listBox4.Items.Add("推荐号码[" + 同尾数1.ToString() + "," + 邻数1.ToString() + "," + 同尾数2.ToString() + "," + 同尾数22.ToString() + "," + 同尾数222.ToString() + "," + 补数2.ToString() + "]");
            //    //listBox4.Items.Add("差值[" + 差数1.ToString() + "].同尾数[" + 同尾数1.ToString() + "].邻数[" + 邻数1.ToString() + "].替数[" + 替数1.ToString() + "][" + 替数11.ToString() + "].");
            //    //listBox4.Items.Add("差值[" + 差数2.ToString() + "].同尾数[" + 同尾数2.ToString() + "].邻数[" + 邻数2.ToString() + "].替数[" + 替数2.ToString() + "][" + 替数22.ToString() + "].");
            //    //listBox4.Items.Add("推荐号码[" + 差数1.ToString() + "," + 凑数1.ToString() + "," + 同尾数1.ToString() + "," + 同尾数2.ToString() + "," + 补数2.ToString() + "," + 同尾数22.ToString() + "]");
            //    //listBox4.Items.Add("推荐号码[" + 同尾数1.ToString() + "," + 差数2.ToString() + "," + 替数22.ToString() + "," + 同尾数2.ToString() + "," + tws3.ToString() + "," + 补数2.ToString() + "]");
            //}
        }

        private void listBox4_DrawItem(object sender, DrawItemEventArgs e)
        {
            if (e.Index >= 0)
            {
                e.DrawBackground();
                Brush mybsh = Brushes.Black;
                Font font = e.Font;
                // 判断是什么类型的标签  
                if (listBox4.Items[e.Index].ToString().IndexOf("差值") != -1)
                {
                    mybsh = Brushes.Green;
                    //font = new Font("Arial", 9, FontStyle.Bold);
                }
                else if (listBox4.Items[e.Index].ToString().IndexOf("推荐号码") != -1)
                {
                    mybsh = Brushes.Red;
                    font = new Font("宋体", 9, FontStyle.Bold);
                }
                else if (listBox4.Items[e.Index].ToString().IndexOf("当期号码") != -1)
                {
                    mybsh = Brushes.Blue;
                    font = new Font("宋体", 9, FontStyle.Bold);
                }
                    // 焦点框  
                    e.DrawFocusRectangle();
                //文本   
                e.Graphics.DrawString(listBox4.Items[e.Index].ToString(), font, mybsh, e.Bounds, StringFormat.GenericDefault);
            }
        }
        private int[] GetXAxisValues(int count)
        {
            int[] values = new int[count];
            for (int i = 0; i < count; i++)
            {
                values[i] = i + 1; // X轴值
            }
            return values;
        }

        private int[] GetYAxisValues(int count)
        {
            Random random = new Random();
            int[] values = new int[count];
            for (int i = 0; i < 7; i++)
            {
                values[i] = random.Next(1, 33); // Y轴值，生成1到99之间的随机数
            }
            return values;
        }


        public TableLayoutPanel tableLayoutPanel;
        public bool tableDisplay = false;

        public class CircleLabel : Label
        {
            public string txt = "0";
            public string name = "";
            public int 颜色 = 1;
            
            protected override void OnPaint(PaintEventArgs e)
            {
                this.SuspendLayout();
                base.OnPaint(e);
                Graphics g = e.Graphics;
                g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;

                // 绘制圆形背景
                g.FillEllipse(颜色==1?Brushes.Red:Brushes.Blue, 0, 0, this.Width, this.Height);

                // 绘制文本
                StringFormat format = new StringFormat();
                format.Alignment = StringAlignment.Center;
                format.LineAlignment = StringAlignment.Center;
                g.DrawString(txt, this.Font, new SolidBrush(this.ForeColor), new RectangleF(0, 1, this.Width, this.Height), format);
                this.ResumeLayout(false);
                //base.OnPaint(e);
            }
        }

        public class CustomPanel : Panel
        {
            private Color borderColor = Color.Black;

            public Color BorderColor
            {
                get { return borderColor; }
                set { borderColor = value; }
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);

                // 绘制自定义边框
                using (Pen pen = new Pen(borderColor))
                {
                    Rectangle rect = new Rectangle(0, 0, this.Width - 1, this.Height - 1);
                    e.Graphics.DrawRectangle(pen, rect);
                }
            }
        }



        /// <summary>
        /// 递归方法,获取指定controlName的控件;如果控件未找到,则返回null,请注意判断null
        /// </summary>
        /// <param name="container">容器控件,可以是窗体form,也可以是panel,GroupBox等</param>
        /// <param name="controlName">控件名称</param>
        /// <returns>返回一个控件类型</returns>
        private Control getControlFromName(Control container, string controlName)
        {

            foreach (Control c in container.Controls)
            {
                if (c.Name == controlName)
                {
                    return c;
                }
                if (c.HasChildren)
                {
                    //这里不能直接写return  getControlFromName(c, controlName);因为会导致只执行第一个子容器控件,如果未找到就提前返回了Null;
                    Control myControl = getControlFromName(c, controlName);
                    if (myControl != null)
                    {
                        return myControl;
                    }
                }
            }
            //并非所有的代码路径都返回值,未找到就返回null
            return null;
        }

        private void tableLayoutPanel_resize(object sender,EventArgs e)
        {
            tableLayoutPanel.GetType()
                .GetProperty("DoubleBuffered", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic)
                .SetValue(tableLayoutPanel, true, null);
        }

        List<int> 号码资源 = new List<int>();
        List<int> 蓝码资源 = new List<int>();
        private void lblFunc_Click(object sender, EventArgs e)
        {
            Control pnl = (Control)sender;
            string stype = pnl.GetType().ToString();

            if (stype.IndexOf("Panel") != -1)
            {
                string[] st1 = pnl.Name.Split('_');
                Control nl = getControlFromName(pnl, st1[1].ToString() + "_" + st1[2].ToString());
                nl.Visible = true;
                //添加号码
                if (int.Parse(st1[2]) < 34) 号码资源.Add(int.Parse(st1[2]) - 1); else 蓝码资源.Add(int.Parse(st1[2]) - 37);
            }
            else
            {
                CircleLabel lbl = (CircleLabel)sender;
                string[] st = lbl.Name.Split('_');
                lbl.Visible = lbl.Visible == false ? true : false;
                //删除号码
                if (int.Parse(st[1]) < 34)
                {
                    foreach (int v in 号码资源)
                    {
                        if (v == int.Parse(st[1]) - 1) { 号码资源.Remove(v); break; }
                    }
                } else
                {
                    foreach(int v in 蓝码资源)
                    {
                        if (v == int.Parse(st[1]) - 37) { 蓝码资源.Remove(v);break; }
                    }
                }

            }
        }

        /// <summary>
        /// 构造双色球开奖展示牌
        /// </summary>
        /// <param name="rows">需要开奖的期数</param>
        public void DoubleColorBallTrajectoryForm(int rows)
        {
            int 列数 = 36+3+16;//3行合值:奇偶:012 16行蓝球
            int 期数 = 2024137;
            tableLayoutPanel = new TableLayoutPanel();
            tableLayoutPanel.ColumnCount = 列数;
            tableLayoutPanel.RowCount = rows +2;
            tableLayoutPanel.CellBorderStyle = TableLayoutPanelCellBorderStyle.Single;
            tableLayoutPanel.Resize += new System.EventHandler(this.tableLayoutPanel_resize);
            tableLayoutPanel.Width = 22 * (列数+13) + 5;
            tableLayoutPanel.Height = 22 * (rows+3);
            tableLayoutPanel.AutoScroll = false;

            //tableLayoutPanel.GetType()
            //    .GetProperty("DoubleBuffered", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic)
            //    .SetValue(tableLayoutPanel, true, null);
            tableLayoutPanel.SuspendLayout();
            int 蓝号 = 1;
            for (int cc = 1; cc < 列数; cc++)
            {
                string 显示编号="";
                if(cc == 1)
                {
                    Label qs = new Label();
                    qs.TextAlign = ContentAlignment.MiddleCenter;
                    qs.Text = "期数";
                    qs.Size = new Size(50, 20);
                    tableLayoutPanel.Controls.Add(qs, cc, 0);
                    continue;
                }
                if (cc == 35)
                {
                    Label qs = new Label();
                    qs.TextAlign = ContentAlignment.MiddleCenter;
                    qs.Text = "合值";
                    qs.Size = new Size(30, 20);
                    tableLayoutPanel.Controls.Add(qs, cc, 0);
                    continue;
                }
                if (cc == 36)
                {
                    Label qs = new Label();
                    qs.TextAlign = ContentAlignment.MiddleCenter;
                    qs.Text = "奇偶";
                    qs.Size = new Size(30, 20);
                    tableLayoutPanel.Controls.Add(qs, cc, 0);
                    continue;
                }
                if (cc == 37)
                {
                    Label qs = new Label();
                    qs.TextAlign = ContentAlignment.MiddleCenter;
                    qs.Text = "012L";
                    qs.Size = new Size(40, 20);
                    tableLayoutPanel.Controls.Add(qs, cc, 0);
                    continue;
                }else if (cc>37 && cc<54)
                {
                    显示编号 = (蓝号++).ToString();
                }else { 显示编号 = (cc - 1).ToString(); }
                Label circleLabel = new Label();
                circleLabel.TextAlign = ContentAlignment.MiddleCenter;
                circleLabel.Text = 显示编号.ToString();
                circleLabel.Size = new Size(20, 20);
                tableLayoutPanel.Controls.Add(circleLabel, cc, 0);
            }


            期数 = 期数 - rows;
            for (int i = 1; i < rows +1 ; i++)
            {
                Application.DoEvents();
                期数 = 期数 + 1;
                List<int> red = new List<int>();
                for (int j = 1; j < 列数; j++)
                {
                    int qs = (rows ) - i;
                    if (j == 1)
                    {
                        Label 期数内容 = new Label();
                        期数内容.TextAlign = ContentAlignment.MiddleCenter;
                        期数内容.Text =(期数).ToString();
                        //circleLabel.ForeColor = Color.White;
                        期数内容.Size = new Size(50, 20);
                        tableLayoutPanel.Controls.Add(期数内容, j, i);
                        continue;
                    }

                    if (hm10[qs, 0] == j -1 || hm10[qs, 1] == j -1|| hm10[qs, 2] == j-1 || hm10[qs, 3] == j -1 || hm10[qs, 4] == j -1
                        || hm10[qs, 5] == j -1 )
                    {
                        CircleLabel circleLabel = new CircleLabel();
                        circleLabel.AutoSize = false;
                        circleLabel.TextAlign = ContentAlignment.MiddleCenter;
                        circleLabel.txt = (j - 1).ToString();
                        circleLabel.ForeColor = Color.White;
                        circleLabel.Size = new Size(19, 19);
                        circleLabel.Name = "" + i.ToString() + "_" + j.ToString();
                        circleLabel.Font = new Font(circleLabel.Font, FontStyle.Bold);
                        red.Add(j - 1);
                        tableLayoutPanel.Controls.Add(circleLabel,j,i);
                    }
                    else 
                    if (j==35)
                    {
                        int redsum = 0;
                        foreach(int v in red)
                        {
                            redsum = redsum + v;
                        }
                        Label circleLabel = new Label();
                        circleLabel.Text = redsum.ToString();
                        circleLabel.TextAlign = ContentAlignment.MiddleCenter;
                        circleLabel.ForeColor = Color.DarkSlateBlue;
                        circleLabel.Size = new Size(30, 20);
                        tableLayoutPanel.Controls.Add(circleLabel, j, i);
                    }
                    else if (j == 36)
                    {
                        int js = 0;
                        int os = 0;
                        foreach (int v in red)
                        {
                            if (v % 2 == 0) os++; else js++;
                        }
                        Label circleLabel = new Label();
                        circleLabel.Text = js.ToString() + ":" + os.ToString();
                        circleLabel.TextAlign = ContentAlignment.MiddleCenter;
                        circleLabel.ForeColor = Color.DarkSlateBlue;
                        circleLabel.Size = new Size(30, 20);
                        tableLayoutPanel.Controls.Add(circleLabel, j, i);
                    }
                    else if (j == 37)
                    {
                        int 余0 = 0;
                        int 余1 = 0;
                        int 余2 = 0;
                        foreach (int v in red)
                        {
                            if (v % 3 == 0) 余0++;
                            if (v % 3 == 1) 余1++;
                            if (v % 3 == 2) 余2++;
                        }
                        Label circleLabel = new Label();
                        circleLabel.Text = 余0.ToString() + ":" + 余1.ToString() + ":" + 余2.ToString();
                        circleLabel.TextAlign = ContentAlignment.MiddleCenter;
                        circleLabel.ForeColor = Color.DarkSlateBlue;
                        circleLabel.Size = new Size(40, 20);
                        tableLayoutPanel.Controls.Add(circleLabel, j, i);
                    }else if (j > 37 && j < 54)
                    {
                        if (hm10[qs, 6] == j - 37)
                        {
                            CircleLabel circleLabel = new CircleLabel();
                            circleLabel.AutoSize = false;
                            circleLabel.TextAlign = ContentAlignment.MiddleCenter;
                            circleLabel.txt = (j - 37).ToString();
                            circleLabel.ForeColor = Color.White;
                            circleLabel.颜色 = 0;
                            circleLabel.Size = new Size(20, 20);
                            circleLabel.Name = "B" + i.ToString() + "_" + j.ToString();
                            circleLabel.Font = new Font(circleLabel.Font, FontStyle.Bold);
                            
                            蓝号数组.Add(circleLabel);
                            tableLayoutPanel.Controls.Add(circleLabel, j, i);

                        }
                        else
                        {
                            Label circleLabel = new Label();
                            circleLabel.Name = "" + i.ToString() + "_" + j.ToString();
                            circleLabel.AutoSize = false;
                            circleLabel.Size = new Size(20, 20);
                            circleLabel.Enabled = false;
                            tableLayoutPanel.Controls.Add(circleLabel, j, i);
                        }
                    }
                    else 
                    {
                        Label circleLabel = new Label();
                        circleLabel.Name = "" + i.ToString() + "_" + j.ToString();
                        circleLabel.Size = new Size(20, 20);
                        tableLayoutPanel.Controls.Add(circleLabel, j, i); 

                    }
                }
            }

            for (int cc = 1; cc < 列数; cc++)
            {
                if (cc == 1)
                {
                    Label qs = new Label();
                    qs.TextAlign = ContentAlignment.MiddleCenter;
                    qs.Text = "自选列";
                    qs.Size = new Size(50, 20);
                    tableLayoutPanel.Controls.Add(qs, cc, rows+2);
                    continue;
                }
                Panel panel = new Panel();
                panel.Size = new Size(20, 20);
                panel.Name = "0_" + rows.ToString() + "_" + cc.ToString();
                panel.Click += new System.EventHandler(this.lblFunc_Click);
                tableLayoutPanel.Controls.Add(panel, cc, rows+2);

                CircleLabel circleLabel = new CircleLabel();
                circleLabel.TextAlign = ContentAlignment.MiddleCenter;
                if (cc > 37 && cc < 54)
                {
                    circleLabel.颜色 = 0;
                    circleLabel.txt = (cc - 37).ToString();
                }
                else 
                circleLabel.txt = (cc -1).ToString();
                circleLabel.AutoSize = false;
                circleLabel.Size = new Size(20, 20);
                circleLabel.ForeColor = Color.White;
                circleLabel.Name = rows.ToString()+"_" + cc.ToString();
                circleLabel.Click += new System.EventHandler(this.lblFunc_Click);
                circleLabel.Visible = false;
                panel.Controls.Add(circleLabel);

            }
           
            tableLayoutPanel.ResumeLayout();
            panel31.Controls.Add(tableLayoutPanel);

            tableLayoutPanel.Paint += new PaintEventHandler(panel_Paint);
            tableDisplay = true;
            //panel31.Size = new Size(600, 260);
        }

        /// <summary>
        /// 绘制连线
        /// </summary>
        /// <param name="startBox"></param>
        /// <param name="endBox"></param>
        private void DrawLine(CircleLabel startBox, CircleLabel endBox)
        {


            using (Graphics g = panel31.CreateGraphics())
            {
                Pen pen = new Pen(Color.Blue, 1.5f);
                pen.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;

                float x1 = startBox.Location.X + startBox.Width / 2;
                float y1 = startBox.Location.Y + startBox.Height / 2;
                float x2 = endBox.Location.X + endBox.Width / 2;
                float y2 = endBox.Location.Y + endBox.Height / 2;

                g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                g.DrawLine(pen, x1, y1, x2, y2);
                g.Dispose();
            }
        }

        private void panel_Paint(object sender, PaintEventArgs e)
        {
            //Graphics g = e.Graphics;
            //g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;

            //// 绘制一条斜直线
            //Pen pen = new Pen(Color.Black, 2);
            //g.DrawLine(pen, 10, 10, 100, 100);
            for (int i = 0; i < 蓝号数组.Count; i++)
            {
                if (i > 0)
                {
                    Graphics g = e.Graphics;
                    g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;

                    // 绘制一条斜直线
                    Pen pen = new Pen(Color.Red, 2);
                    float x1 = 蓝号数组[i - 1].Location.X + 蓝号数组[i - 1].Width / 2;
                    float y1 = 蓝号数组[i - 1].Location.Y + 蓝号数组[i - 1].Height / 2;
                    float x2 = 蓝号数组[i].Location.X + 蓝号数组[i].Width / 2;
                    float y2 = 蓝号数组[i].Location.Y + 蓝号数组[i].Height / 2;


                    g.DrawLine(pen, x1, y1, x2, y2);
                    //g.Dispose();
                    //DrawLine(蓝号数组[i - 1], 蓝号数组[i]);
                }
            }
        }


        private Color GetBallColor(int row, int column)
        {
            // 根据行列号和具体规则返回对应颜色
            // 示例中简单返回红色和蓝色
            if (row < 2)
                return Color.Red;
            else if (column < 3)
                return Color.Blue;
            else
                return Color.White;
        }

        public int 展示期数 = 50;
        List<CircleLabel> 蓝号数组 = new List<CircleLabel>();
        private void button15_Click_1(object sender, EventArgs e)
        {
            展示期数 = int.Parse(zsqs.Text);
            DoubleColorBallTrajectoryForm(展示期数);
        }

        private void button16_Click(object sender, EventArgs e)
        {

            for (int j = 0; j < tableLayoutPanel.ColumnCount; j++)
            {
                int lh = 1;
                for (int i = 1; i < 展示期数 + 1; i++)
                {

                    Control control = tableLayoutPanel.GetControlFromPosition(j, i);
                    if (control is Label label)
                    {
                        string type = label.GetType().ToString();
                        if (label.Name.ToString() != "")
                        {
                            if (label.Name.Substring(0, 1) == "R")
                            {
                                label.Name = j.ToString() + "_" + i.ToString();
                                label.Text = "";
                                continue;
                            }
                        }
                        if (type.IndexOf("CircleLabel") == -1 && label.Text == "")
                        {

                            label.ForeColor = Color.LightSlateGray;
                            label.Name = "R" + j.ToString() + "_" + i.ToString();
                            label.Text = lh.ToString();
                            label.TextAlign = ContentAlignment.MiddleCenter;
                            lh++;
                            //tableLayoutPanel.Controls.Add(nlabel, j, i);
                        }
                        else { lh = 1; }
                    }
                }
                
            }
           
        }

        private void button17_Click(object sender, EventArgs e)
        {
            if (号码资源.Count == 0) return;
            if (号码资源.Count < 6) return;
            int 合值 = 0, 偶数 = 0, 奇数 = 0, L0 = 0, L1 = 0, L2 = 0;
            foreach (int v in 号码资源)
            {
                合值 += v;
                if (v % 2 == 0) 偶数 += 1; else 奇数 += 1;
                if (v % 3 == 0) L0 += 1;
                if (v % 3 == 1) L1 += 1;
                if (v % 3 == 2) L2 += 1;

            }
            string[] hm = 号码资源.Select(n => n.ToString("D2")).ToArray();
            Array.Sort(hm);

            int[] hm1 = new int[6];
            int index1 = 0;
            hm1[0] = hm10[index1, 0];
            hm1[1] = hm10[index1, 1];
            hm1[2] = hm10[index1, 2];
            hm1[3] = hm10[index1, 3];
            hm1[4] = hm10[index1, 4];
            hm1[5] = hm10[index1, 5];
            //hm1[6] = hm10[index1, 6];
            decimal similarity = NumberSimilarityComparer.GetSimilarityWith(hm1, 号码资源.ToArray());
            //listBox4.Items.Add("相似度：" + (similarity * 100).ToString());
            int c1 = 0, c2 = 0, c3 = 0, c4 = 0;
            foreach (int v in 号码资源)
            {
                int count = 0;
                count = 热码.Count(n => n == v);
                if (count != 0) c1 += 1;
                count = 温码.Count(n => n == v);
                if (count != 0) c2 += 1;
                count = 冷码.Count(n => n == v);
                if (count != 0) c3 += 1;
                count = 漏码.Count(n => n == v);
                if (count != 0) c4 += 1;

            }

            label59.Text = "待选号码:" + String.Join(",", hm) +
                           "  [合值:" + 合值.ToString() +
                           "] [偶数:" + 偶数.ToString() + " / 奇数:" + 奇数.ToString() +
                           "] [012L:" + L0.ToString() + ":" + L1.ToString() + ":" + L2.ToString() +
                           "] [相似度:" + (similarity * 100).ToString() +
                           "] [热码:" + c1.ToString() +
                           "] [温码:" + c2.ToString() +
                           "] [冷码:" + c3.ToString() +
                           "] [漏码:" + c4.ToString() +
                           "]";
        }

        private void chart1_Click(object sender, EventArgs e)
        {

        }

        int 绑定期数 = 0;

        private void button18_Click(object sender, EventArgs e)
        {
            绑定期数 = int.Parse(textBox57.Text.ToString());
            List<int>[] red = new List<int>[7];
            red[0] = new List<int>(绑定期数);
            red[1] = new List<int>(绑定期数);
            red[2] = new List<int>(绑定期数);
            red[3] = new List<int>(绑定期数);
            red[4] = new List<int>(绑定期数);
            red[5] = new List<int>(绑定期数);
            red[6] = new List<int>(绑定期数);
            //List<int> red1 = new List<int>();
            //List<int> red2 = new List<int>();
            //List<int> red3 = new List<int>();
            //List<int> red4 = new List<int>();
            //List<int> red5 = new List<int>();
            //List<int> red6 = new List<int>();
            //List<int> blue = new List<int>();
            for (int i = hm10.GetLength(0) - (hm10.GetLength(0) - 绑定期数); i > 0; i--)
            {
                red[0].Add(hm10[i -1, 0]); red[1].Add(hm10[i -1, 1]); red[2].Add(hm10[i - 1, 2]);
                red[3].Add(hm10[i - 1, 3]); red[4].Add(hm10[i - 1, 4]); red[5].Add(hm10[i - 1, 5]);
                red[6].Add(hm10[i - 1, 6]);
            }

            //初始化绑定xy
            List<int> databindx = new List<int>();
            List<int> databindy = new List<int>();
            for (int i = 0; i < 绑定期数; i++)
            {
                databindx.Add(i);
                databindy.Add(0);
            }

            chart1.ChartAreas.Clear();
            

            ChartArea chartarea = new ChartArea();
            chart1.ChartAreas.Add(chartarea);
            chart1.Series.Add(new Series());
            chart1.Series.Add(new Series());
            chart1.Series.Add(new Series());
            chart1.Series.Add(new Series());
            chart1.Series.Add(new Series());
            chart1.Series.Add(new Series());



            chartarea.AxisX.Minimum = 1;
            chartarea.AxisX.Maximum = 绑定期数;
            chartarea.AxisX.Interval = 1;
            chartarea.AxisY.Interval = 1;

            chart1.BackColor = Color.DimGray;
            chart1.Series[0].BorderWidth = 2;
            chart1.Series[1].BorderWidth = 2;
            chart1.Series[2].BorderWidth = 2;
            chart1.Series[3].BorderWidth = 2;
            chart1.Series[4].BorderWidth = 2;
            chart1.Series[5].BorderWidth = 2;
            chart1.Series[6].BorderWidth = 2;
            chart1.Series[0].BorderColor = Color.Red;
            chart1.ChartAreas[0].AxisX.MajorGrid.LineColor = System.Drawing.Color.LightSlateGray;
            chart1.ChartAreas[0].AxisY.MajorGrid.LineColor = System.Drawing.Color.LightSlateGray;
            //chart1.ChartAreas[0].AxisX.MinorGrid.LineColor = System.Drawing.Color.Green;
            chart1.Series[0].ChartType = SeriesChartType.Line;
            chart1.Series[0].Points.DataBindXY(databindx.ToArray(),databindy.ToArray());
            chart1.Series[1].ChartType = SeriesChartType.Line;
            chart1.Series[1].Points.DataBindXY(databindx.ToArray(), databindy.ToArray());
            chart1.Series[2].ChartType = SeriesChartType.Line;
            chart1.Series[2].Points.DataBindXY(databindx.ToArray(), databindy.ToArray());
            chart1.Series[3].ChartType = SeriesChartType.Line;
            chart1.Series[3].Points.DataBindXY(databindx.ToArray(), databindy.ToArray());
            chart1.Series[4].ChartType = SeriesChartType.Line;
            chart1.Series[4].Points.DataBindXY(databindx.ToArray(), databindy.ToArray());
            chart1.Series[5].ChartType = SeriesChartType.Line;
            chart1.Series[5].Points.DataBindXY(databindx.ToArray(), databindy.ToArray());
            chart1.Series[6].ChartType = SeriesChartType.Line;
            chart1.Series[6].Points.DataBindXY(databindx.ToArray(), databindy.ToArray());




            for (int i = 0; i < 绑定期数; i++)
            {
                if (checkBox2.Checked == true)
                {
                    chart1.Series[0].Points[i].YValues[0] = red[1 - 1][i];
                    chart1.Series[0].Points[i].Label = red[1 - 1][i].ToString();
                    chart1.Series[0].Points[i].LabelForeColor = Color.Red;
                }
                if (checkBox3.Checked == true)
                {
                    chart1.Series[1].Points[i].YValues[0] = red[2 - 1][i];
                    chart1.Series[1].Points[i].Label = red[2 - 1][i].ToString();
                    chart1.Series[1].Points[i].LabelForeColor = Color.Red;
                }
                if (checkBox4.Checked == true)
                {
                    chart1.Series[2].Points[i].YValues[0] = red[3 - 1][i];
                    chart1.Series[2].Points[i].Label = red[3 - 1][i].ToString();
                    chart1.Series[2].Points[i].LabelForeColor = Color.Red;
                }
                if (checkBox5.Checked == true)
                {
                    chart1.Series[3].Points[i].YValues[0] = red[4 - 1][i];
                    chart1.Series[3].Points[i].Label = red[4 - 1][i].ToString();
                    chart1.Series[3].Points[i].LabelForeColor = Color.Red;
                }
                if (checkBox6.Checked == true)
                {
                    chart1.Series[4].Points[i].YValues[0] = red[5 - 1][i];
                    chart1.Series[4].Points[i].Label = red[5 - 1][i].ToString();
                    chart1.Series[4].Points[i].LabelForeColor = Color.Red;
                }
                if (checkBox7.Checked == true)
                {
                    chart1.Series[5].Points[i].YValues[0] = red[6 - 1][i];
                    chart1.Series[5].Points[i].Label = red[6 - 1][i].ToString();
                    chart1.Series[5].Points[i].LabelForeColor = Color.Red;
                }
                if (checkBox8.Checked ==true)
                {
                    chart1.Series[6].Points[i].YValues[0] = red[7 - 1][i];
                    chart1.Series[6].Points[i].Label = red[7 - 1][i].ToString();//"●";
                    chart1.Series[6].Points[i].LabelForeColor = Color.Blue;
                }
                //chart1.Series[1].Points[i].YValues[0] = red2[i];
                //chart1.Series[1].Points[i].Label = red2[i].ToString();
            }
        }

        struct 号码分析
        {
            public int 上期号码;
            public int 本期号码;
            public int 下期号码;
            public int 间隔期数;
            public int 遗漏期数;
            public int 期数编号;
        }

 
        private void button20_Click(object sender, EventArgs e)
        {
            //重组开奖数据
            int[][] 开奖数据 = new int[hm10.GetLength(0)][];
            int maxCount = hm10.GetLength(0);
            int maxLenght = hm10.GetLength(1);
            for (int i = 0; i<maxCount; i++)
            {
                开奖数据[i] = new int[maxLenght+1];
                for (int c = 0; c < maxLenght; c++)
                {
                    开奖数据[i][c] = hm10[i, c];
                }
                开奖数据[i][maxLenght] = maxCount - i; 
            }
                
            //当期开奖号码
            List<int> 当期开奖号码 = new List<int>();
            当期开奖号码.Add(hm10[0, 0]);
            当期开奖号码.Add(hm10[0, 1]);
            当期开奖号码.Add(hm10[0, 2]);
            当期开奖号码.Add(hm10[0, 3]);
            当期开奖号码.Add(hm10[0, 4]);
            当期开奖号码.Add(hm10[0, 5]);
            当期开奖号码.Add(hm10[0, 6]); //特别号

            List<int> 上期开奖号码 = new List<int>();
            上期开奖号码.Add(hm10[1, 0]);
            上期开奖号码.Add(hm10[1, 1]);
            上期开奖号码.Add(hm10[1, 2]);
            上期开奖号码.Add(hm10[1, 3]);
            上期开奖号码.Add(hm10[1, 4]);
            上期开奖号码.Add(hm10[1, 5]);
            上期开奖号码.Add(hm10[1, 6]);

            List<int> 上上期开奖号码 = new List<int>();
            上上期开奖号码.Add(hm10[2, 0]);
            上上期开奖号码.Add(hm10[2, 1]);
            上上期开奖号码.Add(hm10[2, 2]);
            上上期开奖号码.Add(hm10[2, 3]);
            上上期开奖号码.Add(hm10[2, 4]);
            上上期开奖号码.Add(hm10[2, 5]);
            上上期开奖号码.Add(hm10[2, 6]);


            List<号码分析> 开奖分析1 = new List<号码分析>();
            List<号码分析> 开奖分析2 = new List<号码分析>();
            List<号码分析> 开奖分析3 = new List<号码分析>();
            List<号码分析> 开奖分析4 = new List<号码分析>();
            List<号码分析> 开奖分析5 = new List<号码分析>();
            List<号码分析> 开奖分析6 = new List<号码分析>();
            List<号码分析> 开奖分析7 = new List<号码分析>();
            int 遗漏1 = 0, 遗漏2 = 0, 遗漏3 = 0, 遗漏4 = 0, 遗漏5 = 0, 遗漏6 = 0, 遗漏7 = 0;
            int currhm = maxCount - 1;
            //分析开奖数据
            for (int i = maxCount; i>0;i--)
            {
                号码分析 fx = new 号码分析();

                for (int c = 0;c<当期开奖号码.Count;c++)
                {
                    int xx = 当期开奖号码[c];

                    if (c == 0 && 开奖数据[currhm][c] == xx)
                    {
                        fx.上期号码 = currhm +1 >= maxCount? 0 : 开奖数据[currhm + 1][c];
                        fx.本期号码 = 开奖数据[currhm][c];
                        fx.遗漏期数 = 遗漏1 -1;
                        fx.间隔期数 = 遗漏1 -1;
                        fx.下期号码 = currhm -1<0 ? 0:开奖数据[currhm -1][c];
                        fx.期数编号 = 开奖数据[currhm][7];
                        开奖分析1.Add(fx);
                        遗漏1 = 0;
                    }
                    if (c == 1 && 开奖数据[currhm][c] == xx)
                    {
                        fx.上期号码 = currhm + 1 >= maxCount ? 0 : 开奖数据[currhm + 1][c];
                        fx.本期号码 = 开奖数据[currhm][c];
                        fx.遗漏期数 = 遗漏2 - 1;
                        fx.间隔期数 = 遗漏2 - 1;
                        fx.下期号码 = currhm - 1 < 0 ? 0 : 开奖数据[currhm - 1][c];
                        fx.期数编号 = 开奖数据[currhm][7];
                        开奖分析2.Add(fx);
                        遗漏2 = 0;
                    }
                    if (c == 2 && 开奖数据[currhm][c] == xx)
                    {
                        fx.上期号码 = currhm + 1 >= maxCount ? 0 : 开奖数据[currhm + 1][c];
                        fx.本期号码 = 开奖数据[currhm][c];
                        fx.遗漏期数 = 遗漏3 - 1;
                        fx.间隔期数 = 遗漏3 - 1;
                        fx.下期号码 = currhm - 1 < 0 ? 0 : 开奖数据[currhm - 1][c];
                        fx.期数编号 = 开奖数据[currhm][7];
                        开奖分析3.Add(fx);
                        遗漏3 = 0;
                    }
                    if (c == 3 && 开奖数据[currhm][c] == xx)
                    {
                        fx.上期号码 = currhm + 1 >= maxCount ? 0 : 开奖数据[currhm + 1][c];
                        fx.本期号码 = 开奖数据[currhm][c];
                        fx.遗漏期数 = 遗漏4 - 1;
                        fx.间隔期数 = 遗漏4 - 1;
                        fx.下期号码 = currhm - 1 < 0 ? 0 : 开奖数据[currhm - 1][c];
                        fx.期数编号 = 开奖数据[currhm][7];
                        开奖分析4.Add(fx);
                        遗漏4 = 0;
                    }
                    if (c == 4 && 开奖数据[currhm][c] == xx)
                    {
                        fx.上期号码 = currhm + 1 >= maxCount ? 0 : 开奖数据[currhm + 1][c];
                        fx.本期号码 = 开奖数据[currhm][c];
                        fx.遗漏期数 = 遗漏5 - 1;
                        fx.间隔期数 = 遗漏5 - 1;
                        fx.下期号码 = currhm - 1 < 0 ? 0 : 开奖数据[currhm - 1][c];
                        fx.期数编号 = 开奖数据[currhm][7];
                        开奖分析5.Add(fx);
                        遗漏5 = 0;
                    }
                    if (c == 5 && 开奖数据[currhm][c] == xx)
                    {
                        fx.上期号码 = currhm + 1 >= maxCount ? 0 : 开奖数据[currhm + 1][c];
                        fx.本期号码 = 开奖数据[currhm][c];
                        fx.遗漏期数 = 遗漏6 - 1;
                        fx.间隔期数 = 遗漏6 - 1;
                        fx.下期号码 = currhm - 1 < 0 ? 0 : 开奖数据[currhm - 1][c];
                        fx.期数编号 = 开奖数据[currhm][7];
                        开奖分析6.Add(fx);
                        遗漏6 = 0;
                    }
                    if (c == 6 && 开奖数据[currhm][c] == xx)
                    {
                        fx.上期号码 = currhm + 1 >= maxCount ? 0 : 开奖数据[currhm + 1][c];
                        fx.本期号码 = 开奖数据[currhm][c];
                        fx.遗漏期数 = 遗漏7 - 1;
                        fx.间隔期数 = 遗漏7 - 1;
                        fx.下期号码 = currhm - 1 < 0 ? 0 : 开奖数据[currhm - 1][c];
                        fx.期数编号 = 开奖数据[currhm][7];
                        开奖分析7.Add(fx);
                        遗漏7 = 0;
                    }

                }
                遗漏1 += 1; 遗漏2 += 1; 遗漏3 += 1; 遗漏4 += 1; 遗漏5 += 1; 遗漏6 += 1; 遗漏7 += 1;
                currhm--;
            }

            var ii =  开奖分析1.Where(n => n.上期号码 == 上期开奖号码[0]).Max(n=>n.下期号码);

            var ii1 = 开奖分析1.Where(n => n.上期号码 == 上期开奖号码[0]).ToList().Count() == 1 ?
                        开奖分析1.Where(n => n.上期号码 == 上上期开奖号码[0]).ToList() :
                        开奖分析1.Where(n => n.上期号码 == 上期开奖号码[0]).ToList();
            var ii2 = 开奖分析2.Where(n => n.上期号码 == 上期开奖号码[1]).ToList().Count() == 1 ?
                        开奖分析2.Where(n => n.上期号码 == 上上期开奖号码[1]).ToList() :
                        开奖分析2.Where(n => n.上期号码 == 上期开奖号码[1]).ToList();
            var ii3 = 开奖分析3.Where(n => n.上期号码 == 上期开奖号码[2]).ToList().Count() == 1 ?
                        开奖分析3.Where(n => n.上期号码 == 上上期开奖号码[2]).ToList() :
                        开奖分析3.Where(n => n.上期号码 == 上期开奖号码[2]).ToList();
            var ii4 = 开奖分析4.Where(n => n.上期号码 == 上期开奖号码[3]).ToList().Count() == 1 ?
                        开奖分析4.Where(n => n.上期号码 == 上上期开奖号码[3]).ToList() :
                        开奖分析4.Where(n => n.上期号码 == 上期开奖号码[3]).ToList();
            var ii5 = 开奖分析5.Where(n => n.上期号码 == 上期开奖号码[4]).ToList().Count() == 1 ?
                        开奖分析5.Where(n => n.上期号码 == 上上期开奖号码[4]).ToList() :
                        开奖分析5.Where(n => n.上期号码 == 上期开奖号码[4]).ToList();
            var ii6 = 开奖分析6.Where(n => n.上期号码 == 上期开奖号码[5]).ToList().Count() == 1 ?
                        开奖分析6.Where(n => n.上期号码 == 上上期开奖号码[5]).ToList() :
                        开奖分析6.Where(n => n.上期号码 == 上期开奖号码[5]).ToList();
            var ii7 = 开奖分析7.Where(n => n.上期号码 == 上期开奖号码[6]).ToList().Count() == 1 ?
                        开奖分析7.Where(n => n.上期号码 == 上上期开奖号码[6]).ToList() :
                        开奖分析7.Where(n => n.上期号码 == 上期开奖号码[6]).ToList();

            //var ii1 = 开奖分析1.ToList();
            //var ii2 = 开奖分析2.ToList();
            //var ii3 = 开奖分析3.ToList();
            //var ii4 = 开奖分析4.ToList();
            //var ii5 = 开奖分析5.ToList();
            //var ii6 = 开奖分析6.ToList();
            //var ii7 = 开奖分析7.ToList();

            List<int> d1 = new List<int>();
            List<int> d2 = new List<int>();
            List<int> d3 = new List<int>();
            List<int> d4 = new List<int>();
            List<int> d5 = new List<int>();
            List<int> d6 = new List<int>();
            List<int> d7 = new List<int>();
            List<int> dd = new List<int>();
            //取漏码
            foreach (var v in ii1)
            {
                if (v.下期号码 > 0) { d1.Add(v.下期号码); dd.Add(v.下期号码); }
            }

            foreach (var v in ii2)
            {
                if (v.下期号码 > 0) { d2.Add(v.下期号码); dd.Add(v.下期号码); }
            }
            foreach (var v in ii3)
            {
                if (v.下期号码 > 0) { d3.Add(v.下期号码); dd.Add(v.下期号码); }
            }
            foreach (var v in ii4)
            {
                if (v.下期号码 > 0) { d4.Add(v.下期号码); dd.Add(v.下期号码); }
            }
            foreach (var v in ii5)
            {
                if (v.下期号码 > 0) { d5.Add(v.下期号码); dd.Add(v.下期号码); }
            }
            foreach (var v in ii6)
            {
                if (v.下期号码 > 0) { d6.Add(v.下期号码); dd.Add(v.下期号码); }
            }
            foreach (var v in ii7)
            {
                if (v.下期号码 > 0) d7.Add(v.下期号码);
            }

            d1 = d1.Distinct().ToList();
            d2 = d2.Distinct().ToList();
            d3 = d3.Distinct().ToList();
            d4 = d4.Distinct().ToList();
            d5 = d5.Distinct().ToList();
            d6 = d6.Distinct().ToList();
            d7 = d7.Distinct().ToList();

            dd = dd.Distinct().ToList();

            int[] xxf = dd.ToArray();
            Array.Sort(xxf);


            //取漏码
            //int[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 };

            //HashSet<int> dictionaryKeys = new HashSet<int>(dic.Keys);
            //var numbersNotFound = numbers.Where(n => !dictionaryKeys.Contains(n)).ToList();

            List<int> 汇总 = new List<int>();


            foreach (var v in ii1)
            {
                Boolean ibcf = false;
                foreach (int i in d1)
                {
                    if (v.下期号码 == i || v.下期号码 == 0) ibcf = true;
                }
                if (ibcf == false) 汇总.Add(v.下期号码);
            }

            foreach (var v in ii2)
            {
                Boolean ibcf = false;
                foreach (int i in d2)
                {
                    if (v.下期号码 == i || v.下期号码 == 0) ibcf = true;
                }
                if (ibcf == false) 汇总.Add(v.下期号码);
            }
            foreach (var v in ii3)
            {
                Boolean ibcf = false;
                foreach (int i in d3)
                {
                    if (v.下期号码 == i || v.下期号码 == 0) ibcf = true;
                }
                if (ibcf == false) 汇总.Add(v.下期号码);
            }
            foreach (var v in ii4)
            {
                Boolean ibcf = false;
                foreach (int i in d4)
                {
                    if (v.下期号码 == i || v.下期号码 == 0) ibcf = true;
                }
                if (ibcf == false) 汇总.Add(v.下期号码);
            }
            foreach (var v in ii5)
            {
                Boolean ibcf = false;
                foreach (int i in d5)
                {
                    if (v.下期号码 == i || v.下期号码 == 0) ibcf = true;
                }
                if (ibcf == false) 汇总.Add(v.下期号码);
            }
            foreach (var v in ii6)
            {
                Boolean ibcf = false;
                foreach (int i in d6)
                {
                    if (v.下期号码 == i || v.下期号码 == 0) ibcf = true;
                }
                if (ibcf == false) 汇总.Add(v.下期号码);
            }
            foreach (var v in ii7)
            {
                Boolean ibcf = false;
                foreach (int i in d7)
                {
                    if (v.下期号码 == i || v.下期号码 == 0) ibcf = true;
                }
                if (ibcf == false) 汇总.Add(v.下期号码);
            }

            汇总 = 汇总.Distinct().ToList();

            Array.Sort(汇总.ToArray());
            listBox1.Items.Add(string.Join(",", 汇总));

            List<int> 号码 = new List<int>();

            listBox1.Items.Add(开奖分析1.Where(n => n.上期号码 == 上期开奖号码[0]).Max(n=>n.下期号码));
            listBox1.Items.Add(开奖分析1.Where(n => n.上期号码 == 上期开奖号码[0]).Min(n => n.下期号码));
            listBox1.Items.Add(开奖分析1.Where(n => n.上期号码 == 上期开奖号码[0]).Average(n => n.下期号码));
            listBox1.Items.Add("---------------------------------");

            listBox1.Items.Add(开奖分析2.Where(n => n.上期号码 == 上期开奖号码[1]).Max(n => n.下期号码));
            listBox1.Items.Add(开奖分析2.Where(n => n.上期号码 == 上期开奖号码[1]).Min(n => n.下期号码));
            listBox1.Items.Add(开奖分析2.Where(n => n.上期号码 == 上期开奖号码[1]).Average(n => n.下期号码));
            listBox1.Items.Add("---------------------------------");

            listBox1.Items.Add(开奖分析3.Where(n => n.上期号码 == 上期开奖号码[2]).Max(n => n.下期号码));
            listBox1.Items.Add(开奖分析3.Where(n => n.上期号码 == 上期开奖号码[2]).Min(n => n.下期号码));
            listBox1.Items.Add(开奖分析3.Where(n => n.上期号码 == 上期开奖号码[2]).Average(n => n.下期号码));
            listBox1.Items.Add("---------------------------------");

            listBox1.Items.Add(开奖分析4.Where(n => n.上期号码 == 上期开奖号码[3]).Max(n => n.下期号码));
            listBox1.Items.Add(开奖分析4.Where(n => n.上期号码 == 上期开奖号码[3]).Min(n => n.下期号码));
            listBox1.Items.Add(开奖分析4.Where(n => n.上期号码 == 上期开奖号码[3]).Average(n => n.下期号码));
            listBox1.Items.Add("---------------------------------");

            listBox1.Items.Add(开奖分析5.Where(n => n.上期号码 == 上期开奖号码[4]).Max(n => n.下期号码));
            listBox1.Items.Add(开奖分析5.Where(n => n.上期号码 == 上期开奖号码[4]).Min(n => n.下期号码));
            listBox1.Items.Add(开奖分析5.Where(n => n.上期号码 == 上期开奖号码[4]).Average(n => n.下期号码));
            listBox1.Items.Add("---------------------------------");

            listBox1.Items.Add(开奖分析6.Where(n => n.上期号码 == 上期开奖号码[5]).Max(n => n.下期号码));
            listBox1.Items.Add(开奖分析6.Where(n => n.上期号码 == 上期开奖号码[5]).Min(n => n.下期号码));
            listBox1.Items.Add(开奖分析6.Where(n => n.上期号码 == 上期开奖号码[5]).Average(n => n.下期号码));
            listBox1.Items.Add("---------------------------------");

            listBox1.Items.Add(开奖分析7.Where(n => n.上期号码 == 上期开奖号码[6]).Max(n => n.下期号码));
            listBox1.Items.Add(开奖分析7.Where(n => n.上期号码 == 上期开奖号码[6]).Min(n => n.下期号码));
            listBox1.Items.Add(开奖分析7.Where(n => n.上期号码 == 上期开奖号码[6]).Average(n => n.下期号码));
            listBox1.Items.Add("---------------------------------");

        }

        private void button19_Click(object sender, EventArgs e)
        {

        }

        #region 获取表中所有列名
        public static string[] GetTableColumnName(DataTable dt)
        {
            string cols = string.Empty;
            for (int i = 0; i < dt.Columns.Count; i++)
            {
                cols += (dt.Columns[i].ColumnName + ",");
            }
            cols = cols.TrimEnd(',');
            return cols.Split(',');
        }
        #endregion
    }


}
